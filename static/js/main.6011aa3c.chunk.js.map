{"version":3,"sources":["components/ChessBoardUI/ChessBoardUI.js","utils/color.js","components/ChessPieceUI/ChessPieceUI.js","utils/board.js","objects/Move.js","objects/ChessPiece.js","objects/Bishop.js","objects/Knight.js","objects/Queen.js","objects/Pawn.js","objects/Rook.js","objects/King.js","objects/ChessBoardState.js","components/FENFormUI/FENFormUI.js","components/ValidMovesUI/ValidMovesUI.js","objects/Stockfish.js","components/ChessGameUI/ChessGameUI.js","index.js"],"names":["ChessBoardUI","props","handleOnClick","bind","row","col","this","movePiece","className","Array","fill","map","square","idx","onClick","Math","floor","React","Component","Color","WHITE","BLACK","Object","freeze","ChessPieceUI","selectPiece","piece","color","isInCheck","style","top","left","icon","rowCol2FileRank","rowCol","file","String","fromCharCode","rank","fileRank2RowCol","fileRank","length","toLowerCase","TypeError","Number","RangeError","charCodeAt","Move","from","to","promotion","ChessPiece","printIcon","notation","constructor","Error","id","count","toRowCol","toFileRank","chessBoardState","rowInc","colInc","checkIfKingInCheck","validMoves","pieceAtTarget","move","get","getMoveRowCol","isEnemyOf","kingWouldBeInCheck","push","Bishop","upLeftMoves","_validMovesAlongLine","upRightMoves","downLeftMoves","downRightMoves","Knight","possibleMoves","filter","getFileRank","Queen","upMoves","rightMoves","downMoves","leftMoves","Pawn","hasMoved","topLeftPiece","enPassantTarget","topRightPiece","bottomLeftPiece","bottomRightPiece","Rook","King","codeToMatch","castleAvailable","queenSideCastleAvailable","fileRankOccupied","kingInCheck","getMoveFileRank","kingSideCastleAvailable","canQueenSideCastle","canKingSideCastle","ChessBoardState","board","currentPlayer","availableCastles","halfMoveClock","fullMoveNumber","fromR","fromC","toR","toC","abs","rook","setFileRank","invalidateCastle","castleCode","includes","replace","king","getPiecesFor","enemyPieces","i","pieces","forEach","cloneState","cloneDeep","chessPieces","type","ranks","ranksStr","emptySpaces","fen","join","rowStrings","rowString","console","log","split","rankStr","currentPlayerStr","availableCastlesStr","enPassantTargetStr","halfMoveClockStr","fullMoveNumberStr","indexOf","char","toUpperCase","match","isNaN","parseInt","FENFormUI","state","fenCode","handleChange","handleSubmit","prevProps","setState","prev","e","target","value","errorStr","preventDefault","fromFEN","error","message","updateBoard","onSubmit","htmlFor","name","size","maxLength","onChange","ValidMovesUI","toToRowCol","Stockfish","bestMove","skill","depth","isThinking","engineStatus","stockfish","Worker","onmessage","event","line","data","engineLoaded","engineReady","postMessage","_","clamp","skillLevel","err_prob","round","max_err","setFEN","toFEN","ChessGameUI","reset","selectedPiece","stockfishSkillLevel","stockfishDepth","newChessBoardState","getPieces","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAuCeA,E,kDAjCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,cAAgB,EAAKA,cAAcC,KAAnB,gBAHN,E,iDAMnB,SAAcC,EAAKC,GACfC,KAAKL,MAAMM,UAAUH,EAAKC,K,oBAG9B,WAAU,IAAD,OACL,OACI,qBAAKG,UAAU,cAAf,SAEQ,IAAIC,MAAM,IAAIC,KAAK,MAAMC,KAAI,SAACC,EAAQC,GAAT,OACzB,qBAEIC,QAAS,kBAAM,EAAKZ,cAChBa,KAAKC,MAAMH,EAAM,GACjBA,EAAM,KAJd,gBACkBA,a,GAjBfI,IAAMC,WCL3BC,G,MAAQ,CACVC,MAAO,EACPC,MAAO,IAEXC,OAAOC,OAAOJ,GAECA,QC8CAK,E,kDA1CX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAEDC,cAAgB,EAAKA,cAAcC,KAAnB,gBAHN,E,iDAMnB,WACIG,KAAKL,MAAMwB,gB,oBAMf,WACI,IAAIjB,EAAY,cAQhB,OAPIF,KAAKL,MAAMyB,MAAMC,QAAUR,EAAMC,QACjCZ,GAAa,UAEbF,KAAKL,MAAM2B,YACXpB,GAAa,aAIb,qBACIA,UAAWA,EACXqB,MAAO,CACHC,IAAI,GAAD,OAA4B,GAAvBxB,KAAKL,MAAMyB,MAAMtB,IAAtB,MACH2B,KAAK,GAAD,OAA4B,GAAvBzB,KAAKL,MAAMyB,MAAMrB,IAAtB,OAERS,QAASR,KAAKJ,cANlB,SAOKI,KAAKL,MAAMyB,MAAMM,W,GA/BPf,IAAMC,W,gCCL1B,SAASe,EAAgBC,GAAS,IAAD,cACjBA,EADiB,GAC7B9B,EAD6B,KACxBC,EADwB,KAQpC,GAAID,EAAM,GAAKA,EAAM,EACjB,OAAO,KAEX,GAAIC,EAAM,GAAKA,EAAM,EACjB,OAAO,KAGX,IAAM8B,EAAOC,OAAOC,aAAahC,EAAM,IACjCiC,EAAO,EAAIlC,EACjB,MAAM,GAAN,OAAU+B,GAAV,OAAiBG,GAOd,SAASC,EAAgBC,GAC5B,GAAyD,IAApBA,EAASC,QAAgBD,EAASE,gBAAkBF,EACrF,MAAMG,UAAU,iDAGpB,IAAMR,EAAOK,EAAS,GAChBF,EAAOM,OAAOJ,EAAS,IAC7B,GAAIL,EAAO,KAAOA,EAAO,IACrB,MAAMU,WAAW,sBAErB,GAAIP,EAAO,GAAKA,EAAO,EACnB,MAAMO,WAAW,sBAKrB,MAAO,CAFK,EAAIP,EACJH,EAAKW,WAAW,GAAK,I,ICnBtBC,E,WAfX,WAAYC,EAAMC,EAAIC,GAAY,oBAC9B5C,KAAK0C,KAAOA,EACZ1C,KAAK2C,GAAKA,EACV3C,KAAK4C,UAAYA,E,gDAGrB,WACI,OAAOX,EAAgBjC,KAAK0C,Q,wBAGhC,WACI,OAAOT,EAAgBjC,KAAK2C,Q,KCZ9BE,E,WAYF,WAAYnB,EAAMoB,EAAWC,EAAU1B,EAAOvB,EAAKC,GAC/C,GADqD,oBACjDC,KAAKgD,aAAeH,EACpB,MAAM,IAAII,MAAM,gDAGpBjD,KAAKkD,GAAKL,EAAWM,MACrBnD,KAAK0B,KAAOA,EACZ1B,KAAK8C,UAAYA,EACjB9C,KAAK+C,SAAWA,EAChB/C,KAAKqB,MAAQA,EACbrB,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,EAEX8C,EAAWM,Q,wCAQf,SAAKrD,EAAKC,GACNC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,I,yBAMf,WACI,OAAO4B,EAAgB,CAAC3B,KAAKF,IAAKE,KAAKD,Q,2BAQ3C,SAAcqD,GAA6B,IAAnBR,EAAkB,uDAAN,KAC1BF,EAAOf,EAAgB,CAAC3B,KAAKF,IAAKE,KAAKD,MACvC4C,EAAKhB,EAAgByB,GAC3B,OAAO,IAAIX,EAAKC,EAAMC,EAAIC,K,6BAQ9B,SAAgBS,GAA+B,IAAnBT,EAAkB,uDAAN,KAC9BF,EAAOf,EAAgB,CAAC3B,KAAKF,IAAKE,KAAKD,MACvC4C,EAAKU,EACX,OAAO,IAAIZ,EAAKC,EAAMC,EAAIC,K,kCAW9B,SAAqBU,EAAiBC,EAAQC,EAAQC,GAQlD,IAPA,IAAMC,EAAa,GAEfC,EAAgB,KAChBC,EAAO,KACP9D,EAAME,KAAKF,IAAMyD,EACjBxD,EAAMC,KAAKD,IAAMyD,EAEd1D,GAAO,GAAKA,GAAO,GAAKC,GAAO,GAAKA,GAAO,GAAG,CAIjD,GAHA4D,EAAgBL,EAAgBO,IAAI/D,EAAKC,GACzC6D,EAAO5D,KAAK8D,cAAc,CAAChE,EAAKC,IAE5B4D,EAAe,CACXA,EAAcI,UAAU/D,KAAKqB,SACzBoC,GACKH,EAAgBU,mBAAmBhE,KAAKqB,MAAOuC,IAIpDF,EAAWO,KAAKL,IAGxB,MAEIH,GACKH,EAAgBU,mBAAmBhE,KAAKqB,MAAOuC,IAIpDF,EAAWO,KAAKL,GAGxB9D,GAAOyD,EACPxD,GAAOyD,EAGX,OAAOE,I,wBASX,SAAWJ,EAAiBG,GACxB,MAAM,IAAIR,MAAM,8C,uBAOpB,SAAU5B,GACN,OAAOA,IAAUrB,KAAKqB,U,KAjIxBwB,EACKM,MAAQ,EAoIJN,QCnHAqB,E,kDArBX,WAAY7C,EAAOvB,EAAKC,GAAM,oBAC1B,IACM+C,EAAYzB,IAAUR,EAAMC,MAAQ,SAAM,SAC1CiC,EAAW1B,IAAUR,EAAMC,MAAQ,IAAM,IAHtB,mBACZ,SAGDgC,EAAWC,EAAU1B,EAAOvB,EAAKC,G,8CAQjD,SAAWuD,GAA6C,IAA5BG,IAA2B,yDAC7CU,EAAcnE,KAAKoE,qBAAqBd,GAAkB,GAAI,EAAGG,GACjEY,EAAerE,KAAKoE,qBAAqBd,GAAkB,EAAG,EAAGG,GACjEa,EAAgBtE,KAAKoE,qBAAqBd,EAAiB,GAAI,EAAGG,GAClEc,EAAiBvE,KAAKoE,qBAAqBd,EAAiB,EAAG,EAAGG,GACxE,MAAM,GAAN,mBAAWU,GAAX,YAA2BE,GAA3B,YAA4CC,GAA5C,YAA8DC,Q,GAlBjD1B,GCoDN2B,E,kDAlDX,WAAYnD,EAAOvB,EAAKC,GAAM,oBAC1B,IACM+C,EAAYzB,IAAUR,EAAMC,MAAQ,SAAM,SAC1CiC,EAAW1B,IAAUR,EAAMC,MAAQ,IAAM,IAHtB,mBACZ,SAGDgC,EAAWC,EAAU1B,EAAOvB,EAAKC,G,8CAQjD,SAAWuD,GAA6C,IAAD,OAA3BG,IAA2B,yDAC7CgB,EAAgB,CAClBzE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,KAG7C4D,EAAgB,KACdD,EAAae,EAAcC,QAAO,SAAAd,GACpC,OAAgB,OAAZA,EAAKjB,OAITgB,EAAgBL,EAAgBqB,YAAYf,EAAKjB,SAIxCgB,IAAiBA,EAAcI,UAAU,EAAK1C,YAM3D,OAAIoC,EACOC,EAAWgB,QAAO,SAAAd,GAAI,OACxBN,EAAgBU,mBAAmB,EAAK3C,MAAOuC,MAIjDF,M,GA/CMb,G,gBC6BN+B,E,kDA7BX,WAAYvD,EAAOvB,EAAKC,GAAM,oBAC1B,IACM+C,EAAYzB,IAAUR,EAAMC,MAAQ,SAAM,SAC1CiC,EAAW1B,IAAUR,EAAMC,MAAQ,IAAM,IAHtB,mBACZ,SAGDgC,EAAWC,EAAU1B,EAAOvB,EAAKC,G,8CASjD,SAAWuD,GAA6C,IAA5BG,IAA2B,yDAC7CU,EAAcnE,KAAKoE,qBAAqBd,GAAkB,GAAI,EAAGG,GACjEY,EAAerE,KAAKoE,qBAAqBd,GAAkB,EAAG,EAAGG,GACjEa,EAAgBtE,KAAKoE,qBAAqBd,EAAiB,GAAI,EAAGG,GAClEc,EAAiBvE,KAAKoE,qBAAqBd,EAAiB,EAAG,EAAGG,GAClEoB,EAAU7E,KAAKoE,qBAAqBd,GAAkB,EAAG,EAAGG,GAC5DqB,EAAa9E,KAAKoE,qBAAqBd,EAAiB,EAAG,EAAGG,GAC9DsB,EAAY/E,KAAKoE,qBAAqBd,EAAiB,EAAG,EAAGG,GAC7DuB,EAAYhF,KAAKoE,qBAAqBd,EAAiB,GAAI,EAAGG,GACpE,MAAM,GAAN,mBACOoB,GADP,YACmBC,GADnB,YACkCC,GADlC,YACgDC,GADhD,YAEOb,GAFP,YAEuBE,GAFvB,YAEwCC,GAFxC,YAE0DC,Q,GAzB9C1B,GC6HLoC,E,kDAzHX,WAAY5D,EAAOvB,EAAKC,GAAM,oBAC1B,IACM+C,EAAYzB,IAAUR,EAAMC,MAAQ,SAAM,SAC1CiC,EAAW1B,IAAUR,EAAMC,MAAQ,IAAM,IAHtB,mBACZ,SAGDgC,EAAWC,EAAU1B,EAAOvB,EAAKC,G,4CAMjD,WACI,OAAQC,KAAKqB,QAAUR,EAAMC,OAAsB,IAAbd,KAAKF,KACnCE,KAAKqB,QAAUR,EAAME,OAAsB,IAAbf,KAAKF,M,2BAO/C,SAAcsD,GAAW,IAAD,cACDA,EADC,GACbtD,EADa,KAGd8C,GAHc,KAGO,IAAR9C,GAAqB,IAARA,EAAa,IAAM,MACnD,OAAO,qEAAoBsD,EAAUR,K,wBAQzC,SAAWU,GAA6C,IAAD,OAA3BG,IAA2B,yDAC7CC,EAAa,GAGf1D,KAAKqB,QAAUR,EAAMC,MACjBd,KAAKF,IAAM,GAAqD,OAAhDwD,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,MACvD2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,OAGtDC,KAAKqB,QAAUR,EAAME,OACtBf,KAAKF,IAAM,GAAqD,OAAhDwD,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,MACvD2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,OAK1DC,KAAKkF,aACFlF,KAAKqB,QAAUR,EAAMC,MACjBd,KAAKF,IAAM,GACwC,OAAhDwD,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,MACS,OAAhDuD,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,MAC1C2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,OAEpDC,KAAKqB,QAAUR,EAAME,OACxBf,KAAKF,IAAM,GACwC,OAAhDwD,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,MACS,OAAhDuD,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,MAC1C2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,QAKjDuD,EAAgBO,IAAI7D,KAAKF,IAAKE,KAAKD,IAAM,GACxCuD,EAAgBO,IAAI7D,KAAKF,IAAKE,KAAKD,IAAM,GAG5D,GAAIC,KAAKqB,QAAUR,EAAMC,MAAO,CAE5B,GAAId,KAAKF,IAAM,GAAKE,KAAKD,IAAM,EAAG,CAC9B,IAAMoF,EAAe7B,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC9DoF,GAAgBA,EAAapB,UAAU/D,KAAKqB,QAErCiC,EAAgB8B,kBAAoBzD,EAAgB,CAAC3B,KAAKF,IAAM,EAAGE,KAAKD,IAAM,MADrF2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,KAOrE,GAAIC,KAAKF,IAAM,GAAKE,KAAKD,IAAM,EAAG,CAC9B,IAAMsF,EAAgB/B,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC/DsF,GAAiBA,EAActB,UAAU/D,KAAKqB,QAEvCiC,EAAgB8B,kBAAoBzD,EAAgB,CAAC3B,KAAKF,IAAM,EAAGE,KAAKD,IAAM,MADrF2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,WAMlE,GAAIC,KAAKqB,QAAUR,EAAME,MAAO,CAEnC,GAAIf,KAAKF,IAAM,GAAKE,KAAKD,IAAM,EAAG,CAC9B,IAAMuF,EAAkBhC,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IACjEuF,GAAmBA,EAAgBvB,UAAU/D,KAAKqB,QAE3CiC,EAAgB8B,kBAAoBzD,EAAgB,CAAC3B,KAAKF,IAAM,EAAGE,KAAKD,IAAM,MADrF2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,KAOrE,GAAIC,KAAKF,IAAM,GAAKE,KAAKD,IAAM,EAAG,CAC9B,IAAMwF,EAAmBjC,EAAgBO,IAAI7D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAClEwF,GAAoBA,EAAiBxB,UAAU/D,KAAKqB,QAE7CiC,EAAgB8B,kBAAoBzD,EAAgB,CAAC3B,KAAKF,IAAM,EAAGE,KAAKD,IAAM,MADrF2D,EAAWO,KAAKjE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,MAQzE,OAAI0D,EACOC,EAAWgB,QAAO,SAAAd,GACrB,OAAQN,EAAgBU,mBAAmB,EAAK3C,MAAOuC,MAIxDF,M,GAtHIb,GC4BJ2C,E,kDA9BX,WAAYnE,EAAOvB,EAAKC,GAAM,oBAC1B,IACM+C,EAAYzB,IAAUR,EAAMC,MAAQ,SAAM,SAC1CiC,EAAW1B,IAAUR,EAAMC,MAAQ,IAAM,IAHtB,mBACZ,SAGDgC,EAAWC,EAAU1B,EAAOvB,EAAKC,G,wCAQjD,SAAKD,EAAKC,GACN,4DAAWD,EAAKC,K,wBAQpB,SAAWuD,GAA6C,IAA5BG,IAA2B,yDAC7CoB,EAAU7E,KAAKoE,qBAAqBd,GAAkB,EAAG,EAAGG,GAC5DsB,EAAY/E,KAAKoE,qBAAqBd,EAAiB,EAAG,EAAGG,GAC7DqB,EAAa9E,KAAKoE,qBAAqBd,EAAiB,EAAG,EAAGG,GAC9DuB,EAAYhF,KAAKoE,qBAAqBd,EAAiB,GAAI,EAAGG,GACpE,MAAM,GAAN,mBAAWoB,GAAX,YAAuBC,GAAvB,YAAsCC,GAAtC,YAAoDC,Q,GA3BzCnC,GC0JJ4C,E,kDAvJX,WAAYpE,EAAOvB,EAAKC,GAAM,oBAC1B,IACM+C,EAAYzB,IAAUR,EAAMC,MAAQ,SAAM,SAC1CiC,EAAW1B,IAAUR,EAAMC,MAAQ,IAAM,IAHtB,mBACZ,SAGDgC,EAAWC,EAAU1B,EAAOvB,EAAKC,G,wCAQjD,SAAKD,EAAKC,GACN,4DAAWD,EAAKC,K,sCAOpB,SAAyBuD,GACrB,IAAMoC,EAAc1F,KAAKqB,QAAUR,EAAMC,MAAQ,IAAM,IACvD,OAAOwC,EAAgBqC,gBAAgBD,K,gCAO3C,SAAmBpC,GAEf,IAAItB,EAAOhC,KAAKqB,QAAUR,EAAMC,MAAQ,EAAI,EAE5C,QAAKd,KAAK4F,yBAAyBtC,OAK/BA,EAAgBuC,iBAAhB,WAAqC7D,KAClCsB,EAAgBuC,iBAAhB,WAAqC7D,KACrCsB,EAAgBuC,iBAAhB,WAAqC7D,QAKxCsB,EAAgBwC,YAAY9F,KAAKqB,UAIjCiC,EAAgBU,mBAAmBhE,KAAKqB,MAAOrB,KAAK+F,gBAAL,WAAyB/D,OACrEsB,EAAgBU,mBAAmBhE,KAAKqB,MAAOrB,KAAK+F,gBAAL,WAAyB/D,U,qCAWnF,SAAwBsB,GACpB,IAAMoC,EAAc1F,KAAKqB,QAAUR,EAAMC,MAAQ,IAAM,IACvD,OAAOwC,EAAgBqC,gBAAgBD,K,+BAO3C,SAAkBpC,GAEd,IAAItB,EAAOhC,KAAKqB,QAAUR,EAAMC,MAAQ,EAAI,EAE5C,QAAKd,KAAKgG,wBAAwB1C,MAK9BA,EAAgBuC,iBAAhB,WAAqC7D,MAClCsB,EAAgBuC,iBAAhB,WAAqC7D,OAKxCsB,EAAgBwC,YAAY9F,KAAKqB,UAIjCiC,EAAgBU,mBAAmBhE,KAAKqB,MAAOrB,KAAK+F,gBAAL,WAAyB/D,OACrEsB,EAAgBU,mBAAmBhE,KAAKqB,MAAOrB,KAAK+F,gBAAL,WAAyB/D,U,wBAanF,SAAWsB,GAA6C,IAAD,OAA3BG,IAA2B,yDAC7CgB,EAAgB,CAClBzE,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,MACvCC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAKE,KAAKD,IAAM,IACzCC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,MACvCC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,IAC7CC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAKE,KAAKD,IAAM,IACzCC,KAAK8D,cAAc,CAAC9D,KAAKF,IAAM,EAAGE,KAAKD,IAAM,KAG7C4D,EAAgB,KACdD,EAAae,EAAcC,QAAO,SAAAd,GACpC,OAAgB,OAAZA,EAAKjB,OAITgB,EAAgBL,EAAgBqB,YAAYf,EAAKjB,SAIxCgB,IAAiBA,EAAcI,UAAU,EAAK1C,YAM3D,GAAIoC,EAAoB,CACpB,IAAMzB,EAAOhC,KAAKqB,QAAUR,EAAMC,MAAQ,EAAI,EAC1Cd,KAAKiG,mBAAmB3C,IACxBI,EAAWO,KAAKjE,KAAK+F,gBAAL,WAAyB/D,KAEzChC,KAAKkG,kBAAkB5C,IACvBI,EAAWO,KAAKjE,KAAK+F,gBAAL,WAAyB/D,KAIjD,OAAIyB,EACOC,EAAWgB,QAAO,SAAAd,GAAI,OACxBN,EAAgBU,mBAAmB,EAAK3C,MAAOuC,MAIjDF,M,GApJIb,GCuhBJsD,E,WA5gBX,aAAe,oBACXnG,KAAKoG,MAAQ,CACT,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAE/CpG,KAAKqG,cAAgBxF,EAAMC,MAC3Bd,KAAKsG,iBAAmB,IACxBtG,KAAKoF,gBAAkB,IACvBpF,KAAKuG,cAAgB,EACrBvG,KAAKwG,eAAiB,E,uCAQ1B,SAAI1G,EAAKC,GACL,OAAOC,KAAKoG,MAAMtG,GAAKC,K,yBAO3B,SAAYmC,GAAW,IAAD,EACCD,EAAgBC,GADjB,mBACXpC,EADW,KACNC,EADM,KAElB,OAAOC,KAAKoG,MAAMtG,GAAKC,K,8BAO3B,SAAiBmC,GAAW,IAAD,EACJD,EAAgBC,GADZ,mBAChBpC,EADgB,KACXC,EADW,KAEvB,OAAgC,OAAzBC,KAAKoG,MAAMtG,GAAKC,K,yBAQ3B,SAAYmC,EAAUd,GAAQ,IAAD,EACNa,EAAgBC,GADV,mBAClBpC,EADkB,KACbC,EADa,KAEzBC,KAAKoG,MAAMtG,GAAKC,GAAOqB,I,mBAM3B,WACIpB,KAAKoG,MAAQ,CACT,CAAC,IAAIZ,EAAK3E,EAAME,MAAO,EAAG,GAAI,IAAIyD,EAAO3D,EAAME,MAAO,EAAG,GAAI,IAAImD,EAAOrD,EAAME,MAAO,EAAG,GAAI,IAAI6D,EAAM/D,EAAME,MAAO,EAAG,GAAI,IAAI0E,EAAK5E,EAAME,MAAO,EAAG,GAAI,IAAImD,EAAOrD,EAAME,MAAO,EAAG,GAAI,IAAIyD,EAAO3D,EAAME,MAAO,EAAG,GAAI,IAAIyE,EAAK3E,EAAME,MAAO,EAAG,IAC9O,CAAC,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,GAAI,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,GAAI,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,GAAI,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,GAAI,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,GAAI,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,GAAI,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,GAAI,IAAIkE,EAAKpE,EAAME,MAAO,EAAG,IACrO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,IAAIkE,EAAKpE,EAAMC,MAAO,EAAG,GAAI,IAAImE,EAAKpE,EAAMC,MAAO,EAAG,GAAI,IAAImE,EAAKpE,EAAMC,MAAO,EAAG,GAAI,IAAImE,EAAKpE,EAAMC,MAAO,EAAG,GAAI,IAAImE,EAAKpE,EAAMC,MAAO,EAAG,GAAI,IAAImE,EAAKpE,EAAMC,MAAO,EAAG,GAAI,IAAImE,EAAKpE,EAAMC,MAAO,EAAG,GAAI,IAAImE,EAAKpE,EAAMC,MAAO,EAAG,IACrO,CAAC,IAAI0E,EAAK3E,EAAMC,MAAO,EAAG,GAAI,IAAI0D,EAAO3D,EAAMC,MAAO,EAAG,GAAI,IAAIoD,EAAOrD,EAAMC,MAAO,EAAG,GAAI,IAAI8D,EAAM/D,EAAMC,MAAO,EAAG,GAAI,IAAI2E,EAAK5E,EAAMC,MAAO,EAAG,GAAI,IAAIoD,EAAOrD,EAAMC,MAAO,EAAG,GAAI,IAAI0D,EAAO3D,EAAMC,MAAO,EAAG,GAAI,IAAI0E,EAAK3E,EAAMC,MAAO,EAAG,KAElPd,KAAKqG,cAAgBxF,EAAMC,MAC3Bd,KAAKsG,iBAAmB,OACxBtG,KAAKoF,gBAAkB,IACvBpF,KAAKuG,cAAgB,EACrBvG,KAAKwG,eAAiB,I,kBAO1B,SAAK5C,GAAO,IAAD,EACgB3B,EAAgB2B,EAAKlB,MADrC,mBACA+D,EADA,KACOC,EADP,OAEYzE,EAAgB2B,EAAKjB,IAFjC,mBAEAgE,EAFA,KAEKC,EAFL,KAKDxF,EAAQpB,KAAKoG,MAAMK,GAAOC,GAMhC,OALA1G,KAAKoG,MAAMK,GAAOC,GAAS,KAC3B1G,KAAKoG,MAAMO,GAAKC,GAAOxF,EACvBA,EAAMwC,KAAK+C,EAAKC,GAGRhD,EAAKhB,WACT,IAAK,IACD5C,KAAKoG,MAAMO,GAAKC,GAAO,IAAIhC,EAAM5E,KAAKqG,cAAeM,EAAKC,GAC1D,MACJ,IAAK,IACD5G,KAAKoG,MAAMO,GAAKC,GAAO,IAAIpB,EAAKxF,KAAKqG,cAAeM,EAAKC,GACzD,MACJ,IAAK,IACD5G,KAAKoG,MAAMO,GAAKC,GAAO,IAAI1C,EAAOlE,KAAKqG,cAAeM,EAAKC,GAC3D,MACJ,IAAK,IACD5G,KAAKoG,MAAMO,GAAKC,GAAO,IAAIpC,EAAOxE,KAAKqG,cAAeM,EAAKC,GAC3D,MACJ,KAAK,KAED,MACJ,QACI,MAAM,IAAI3D,MAAM,+CAwBxB,GApBI7B,aAAiB6D,GAAQrB,EAAKjB,KAAO3C,KAAKoF,kBACtChE,EAAMC,QAAUR,EAAMC,MACtBd,KAAKoG,MAAMO,EAAM,GAAGC,GAAO,KACpBxF,EAAMC,QAAUR,EAAME,QAC7Bf,KAAKoG,MAAMO,EAAM,GAAGC,GAAO,OAK/BxF,aAAiB6D,GAAkC,IAA1BxE,KAAKoG,IAAIJ,EAAQE,GACtCvF,EAAMC,QAAUR,EAAMC,MACtBd,KAAKoF,gBAAkBzD,EAAgB,CAACgF,EAAM,EAAGC,IAC1CxF,EAAMC,QAAUR,EAAME,QAC7Bf,KAAKoF,gBAAkBzD,EAAgB,CAACgF,EAAM,EAAGC,KAGrD5G,KAAKoF,gBAAkB,IAIvBhE,aAAiBqE,GAAkC,IAA1BhF,KAAKoG,IAAIH,EAAQE,GAC1C,GAAIxF,EAAMC,QAAUR,EAAMC,MACtB,GAAgB,OAAZ8C,EAAKjB,GAAa,CAElB,IAAMmE,EAAO9G,KAAK2E,YAAY,MAC9B3E,KAAK+G,YAAY,KAAMD,GACvB9G,KAAK+G,YAAY,KAAM,UACpB,IAAgB,OAAZnD,EAAKjB,GAMZ,MAAM,IAAIM,MAAM,2BAJhB,IAAM6D,EAAO9G,KAAK2E,YAAY,MAC9B3E,KAAK+G,YAAY,KAAMD,GACvB9G,KAAK+G,YAAY,KAAM,WAIxB,GAAI3F,EAAMC,QAAUR,EAAME,MAC7B,GAAgB,OAAZ6C,EAAKjB,GAAa,CAElB,IAAMmE,EAAO9G,KAAK2E,YAAY,MAC9B3E,KAAK+G,YAAY,KAAMD,GACvB9G,KAAK+G,YAAY,KAAM,UACpB,IAAgB,OAAZnD,EAAKjB,GAMZ,MAAM,IAAIM,MAAM,2BAJhB,IAAM6D,EAAO9G,KAAK2E,YAAY,MAC9B3E,KAAK+G,YAAY,KAAMD,GACvB9G,KAAK+G,YAAY,KAAM,MAQ/B3F,aAAiBqE,IACbrE,EAAMC,QAAUR,EAAMC,MACtBd,KAAKgH,iBAAiB,MACf5F,EAAMC,QAAUR,EAAME,OAC7Bf,KAAKgH,iBAAiB,OAG1B5F,aAAiBoE,IACbpE,EAAMC,QAAUR,EAAMC,MACJ,OAAd8C,EAAKlB,KACL1C,KAAKgH,iBAAiB,KACD,OAAdpD,EAAKlB,MACZ1C,KAAKgH,iBAAiB,KAEnB5F,EAAMC,QAAUR,EAAME,QACX,OAAd6C,EAAKlB,KACL1C,KAAKgH,iBAAiB,KACD,OAAdpD,EAAKlB,MACZ1C,KAAKgH,iBAAiB,OAM9B5F,aAAiB6D,GAAQ7D,aAAiBqE,EAC1CzF,KAAKuG,cAAgB,EAErBvG,KAAKuG,gBAITvG,KAAKqG,cAAgBrG,KAAKqG,gBAAkBxF,EAAMC,MAC5CD,EAAME,MACNF,EAAMC,MAGRd,KAAKqG,gBAAkBxF,EAAMC,OAC7Bd,KAAKwG,mB,yBASb,SAAY1G,EAAKC,GACbC,KAAKoG,MAAMtG,GAAKC,GAAO,O,6BAS3B,SAAgBkH,GACZ,OAAOjH,KAAKsG,iBAAiBY,SAASD,K,8BAS1C,SAAiBA,GACbjH,KAAKsG,iBAAmBtG,KAAKsG,iBAAiBa,QAAQF,EAAY,IAEpC,KAA1BjH,KAAKsG,mBACLtG,KAAKsG,iBAAmB,O,yBAShC,SAAYjF,GAMR,IALA,IAAM+F,EAAOpH,KAAKqH,aAAahG,EAAOoE,GAAM,GACtC6B,EAActH,KAAKqH,aACrBhG,IAAUR,EAAMC,MAAQD,EAAME,MAAQF,EAAMC,OAGvCyG,EAAI,EAAGA,EAAID,EAAYnF,OAAQoF,IAAK,CAMzC,GALmBD,EAAYC,GACD7D,WAAW1D,MAAM,GACX0E,QAChC,SAAAd,GAAI,OAAIA,EAAKjB,KAAOyE,EAAKzC,iBAERxC,OAAS,EAC1B,OAAO,EAIf,OAAO,I,6BAQX,SAAgBd,GAAQ,IAAD,OACnB,IAAKrB,KAAK8F,YAAYzE,GAClB,OAAO,EAGX,IAAMmG,EAASxH,KAAKqH,aAAahG,GAC3BqC,EAAa,GAKnB,OAJA8D,EAAOC,SAAQ,SAAArG,GACXsC,EAAWO,KAAX,MAAAP,EAAU,YAAStC,EAAMsC,WAAW,QAGX,IAAtBA,EAAWvB,S,gCAatB,SAAmBd,EAAOuC,GACtB,IAAM8D,EAAaC,oBAAU3H,MAE7B,OADA0H,EAAW9D,KAAKA,GACT8D,EAAW5B,YAAYzE,K,uBAOlC,WACI,IAAMuG,EAAc,GAQpB,OAPA5H,KAAKoG,MAAMqB,SAAQ,SAAA3H,GACfA,EAAI2H,SAAQ,SAAArG,GACM,OAAVA,GACAwG,EAAY3D,KAAK7C,SAItBwG,I,0BASX,SAAavG,GAAqB,IAAdwG,EAAa,uDAAN,KACjBD,EAAc,GAUpB,OATA5H,KAAKoG,MAAMqB,SAAQ,SAAA3H,GACfA,EAAI2H,SAAQ,SAAArG,GACO,OAAVA,GAAkBA,EAAMC,QAAUA,IACtB,OAATwG,GAAiBzG,aAAiByG,IAClCD,EAAY3D,KAAK7C,SAK1BwG,I,mBA8IX,WACI,IAAIE,EAAQ,GACZ9H,KAAKoG,MAAMqB,SAAQ,SAAAzF,GACf,IAAI+F,EAAW,GACXC,EAAc,EAClBhG,EAAKyF,SAAQ,SAAArG,GACK,OAAVA,EACA4G,KAEIA,IACAD,GAAYC,EACZA,EAAc,GAElBD,GAAY3G,EAAM2B,aAGtBiF,IACAD,GAAYC,GAEhBF,EAAM7D,KAAK8D,MAGf,IAAIE,EAAMH,EAAMI,KAAK,KASrB,OAPAD,GAAOjI,KAAKqG,gBAAkBxF,EAAMC,MAAQ,KAAO,KAEnDmH,GAAG,WAAQjI,KAAKsG,kBAChB2B,GAAG,WAAQjI,KAAKoF,iBAChB6C,GAAG,WAAQjI,KAAKuG,eAChB0B,GAAG,WAAQjI,KAAKwG,kB,mBAQpB,WACI,IAAI2B,EAAa,GACjBnI,KAAKoG,MAAMqB,SAAQ,SAAA3H,GACf,IAAIsI,EAAY,GAChBtI,EAAI2H,SAAQ,SAAArG,GACRgH,GAAuB,OAAVhH,EAAiB,IAAMA,EAAM0B,aAE9CqF,EAAWlE,KAAKmE,MAEpBC,QAAQC,IAAIH,EAAWD,KAAK,U,sBArLhC,SAAeD,GACX,IAAMM,EAAQN,EAAIM,MAAM,KAExB,GAAqB,IAAjBA,EAAMpG,OACN,MAAM,IAAIc,MAAM,yHAGpB,IAAMuF,EAAUD,EAAM,GAChBE,EAAmBF,EAAM,GACzBG,EAAsBH,EAAM,GAC5BI,EAAqBJ,EAAM,GAC3BK,EAAmBL,EAAM,GACzBM,EAAoBN,EAAM,GAEhC,IAA8B,IAA1BC,EAAQM,QAAQ,OAAyC,IAA1BN,EAAQM,QAAQ,KAC/C,MAAM,IAAI7F,MAAM,6CAGpB,IAAMK,EAAkB,IAAI6C,EAGxB2B,EAAQU,EAAQD,MAAM,KAC1B,GAAqB,IAAjBT,EAAM3F,OACN,MAAM,IAAII,WAAW,4BAEzB,IAAK,IAAIP,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CAEjC,IADA,IAAIH,EAAO,EACF0F,EAAI,EAAGA,EAAIO,EAAM9F,GAAMG,OAAQoF,IAAK,CACzC,IAAMwB,EAAOjB,EAAM9F,GAAMuF,GAEzB,KAAKwB,GAAQ,KAAOA,GAAQ,KACpB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK7B,SAAS6B,EAAKC,gBAGjD,MAAM,IAAI/F,MAAM,8BAIpB,GAAI8F,GAAQ,KAAOA,GAAQ,IACvBlH,GAAQS,OAAOyG,OADnB,CAKA,IAAM1H,EAAQ0H,IAASA,EAAKC,cACtBnI,EAAMC,MACND,EAAME,MACRK,OAAK,EACT,OAAQ2H,EAAK3G,eACT,IAAK,IACDhB,EAAQ,IAAI6D,EAAK5D,EAAOW,EAAMH,GAC9B,MACJ,IAAK,IACDT,EAAQ,IAAIoD,EAAOnD,EAAOW,EAAMH,GAChC,MACJ,IAAK,IACDT,EAAQ,IAAI8C,EAAO7C,EAAOW,EAAMH,GAChC,MACJ,IAAK,IACDT,EAAQ,IAAIoE,EAAKnE,EAAOW,EAAMH,GAC9B,MACJ,IAAK,IACDT,EAAQ,IAAIwD,EAAMvD,EAAOW,EAAMH,GAC/B,MACJ,IAAK,IACDT,EAAQ,IAAIqE,EAAKpE,EAAOW,EAAMH,GAC9B,MACJ,QACI,MAAM,IAAIoB,MAAM,0BAGxBK,EAAgB8C,MAAMpE,GAAMH,GAAQT,EACpCS,KAGJ,GAAIA,EAAO,GAAKA,EAAO,EAEnB,MAAM,IAAIoB,MAAM,8BAKxB,OAAQwF,GACJ,IAAK,IACDnF,EAAgB+C,cAAgBxF,EAAMC,MACtC,MACJ,IAAK,IACDwC,EAAgB+C,cAAgBxF,EAAME,MACtC,MACJ,QACI,MAAM,IAAIkC,MAAM,iCAIxB,IAAKyF,EAAoBO,MAAM,gBAC3B,MAAM,IAAIhG,MAAM,+BAKpB,GAHAK,EAAgBgD,iBAAmBoC,IAIA,IAA9BC,EAAmBxG,QAAuC,MAAvBwG,GAEF,IAA9BA,EAAmBxG,QACfwG,EAAmB,IAAM,KAAOA,EAAmB,IAAM,KACzDA,EAAmB,IAAM,GAAKA,EAAmB,IAAM,GAK/D,MAAM,IAAI1F,MAAM,+BAKpB,GAHAK,EAAgB8B,gBAAkBuD,EAG9BO,MAAMN,IACHO,SAASP,IAAqBA,GAC9BO,SAASP,GAAoB,EAChC,MAAM,IAAI3F,MAAM,2CAKpB,GAHAK,EAAgBiD,cAAgBjE,OAAOsG,GAGnCM,MAAML,IACHM,SAASN,IAAsBA,GAC/BM,SAASN,GAAqB,EACjC,MAAM,IAAI5F,MAAM,+CAIpB,OAFAK,EAAgBkD,eAAiBlE,OAAOuG,GAEjCvF,M,KC7YA8F,E,kDAjFX,WAAYzJ,GAAQ,IAAD,8BACf,cAAMA,IACD0J,MAAQ,CAAEC,QAAS,EAAK3J,MAAM2J,SAEnC,EAAKC,aAAe,EAAKA,aAAa1J,KAAlB,gBACpB,EAAK2J,aAAe,EAAKA,aAAa3J,KAAlB,gBALL,E,sDAYnB,SAAmB4J,GAAY,IAAD,OACtBA,EAAUH,UAAYtJ,KAAKL,MAAM2J,SACjCtJ,KAAK0J,UAAS,SAAAC,GAAI,kCACXA,GADW,IAEdL,QAAS,EAAK3J,MAAM2J,e,0BAShC,SAAaM,GACT5J,KAAK0J,UAAS,SAAAC,GAAI,kCACXA,GADW,IAEdL,QAASM,EAAEC,OAAOC,MAClBC,SAAU,U,0BAQlB,SAAaH,GACTA,EAAEI,iBACF,IACI7D,EAAgB8D,QAAQjK,KAAKqJ,MAAMC,SACrC,MAAOY,GAKL,YAJAlK,KAAK0J,UAAS,SAAAC,GAAI,kCACXA,GADW,IAEdI,SAAUG,EAAMC,aAIxBnK,KAAKL,MAAMyK,YAAYpK,KAAKqJ,MAAMC,W,oBAMtC,WACI,OACI,gCACI,uBAAMpJ,UAAU,WAAWmK,SAAUrK,KAAKwJ,aAA1C,UACI,uBAAOc,QAAQ,YAAf,iBACA,uBACIpK,UAAU,YACVqK,KAAK,YACL1C,KAAK,OACL2C,KAAK,KACLC,UAAU,KACVX,MAAO9J,KAAKqJ,MAAMC,QAClBoB,SAAU1K,KAAKuJ,kBAIvB,mBAAGrJ,UAAU,iBAAb,SAA+BF,KAAKqJ,MAAMU,kB,GAvElCpJ,IAAMC,WCkDf+J,G,wDAjDX,WAAYhL,GAAQ,IAAD,8BACf,cAAMA,IAEDC,cAAgB,EAAKA,cAAcC,KAAnB,gBAHN,E,iDAMnB,SAAcC,EAAKC,GACfC,KAAKL,MAAMM,UAAUH,EAAKC,K,oBAM9B,WAAU,IAAD,OACL,OACI,8BAEQC,KAAKL,MAAM+D,WAAWrD,KAAI,SAACuD,EAAMrD,GAAS,IAAD,EAClBqD,EAAKgH,aADa,mBAC9B9K,EAD8B,KACzBC,EADyB,KAErC,OACI,qBAEIG,UAAU,aACVqB,MAAO,CACHC,IAAI,GAAD,OAAW,GAAN1B,EAAL,MACH2B,KAAK,GAAD,OAAW,GAAN1B,EAAL,OAERS,QAAS,kBAAM,EAAKZ,cAAcE,EAAKC,IAP3C,uCACsBQ,a,GAtBvBI,IAAMC,YCsGlBiK,E,WAtGX,aAAe,IAAD,2BACV7K,KAAK8K,SAAW,KAChB9K,KAAK+K,MAAQ,KACb/K,KAAKgL,MAAQ,KACbhL,KAAKiL,YAAa,EAClBjL,KAAKkL,aAAe,GAEpBlL,KAAKmL,UAAY,IAAIC,OAAO,gBAC5BpL,KAAKmL,UAAUE,UAAY,SAACC,GACxB,IAAMC,EAAOD,GAA0B,kBAAVA,EAAqBA,EAAME,KAAOF,EAI/D,GAFAjD,QAAQC,IAAI,cAAeiD,GAEd,UAATA,EACA,EAAKL,aAAaO,cAAe,OAC9B,GAAa,YAATF,EACP,EAAKL,aAAaQ,aAAc,MAC7B,CACH,IAAMzC,EAAQsC,EAAKtC,MAAM,+CACrBA,IACA,EAAK6B,SAAW,IAAIrI,EAAKwG,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAKA,EAAM,GAAK,MACnE,EAAKgC,YAAa,KAK9BjL,KAAKmL,UAAUQ,YAAY,OAC3B3L,KAAKmL,UAAUQ,YAAY,W,kDAI/B,WACI,OAAO3L,KAAKkL,aAAaO,e,oBAO7B,SAAOnC,GACH,IAAKtJ,KAAKkL,aAAaO,aACnB,MAAM,IAAIxI,MAAM,qBAGpBjD,KAAKmL,UAAUQ,YAAf,uBAA2CrC,M,sBAO/C,SAAS0B,GACL3C,QAAQC,IAAI0C,GACZhL,KAAKgL,MAAQY,IAAEC,MAAMb,EAAO,EAAG,M,2BAOnC,SAAcc,GACV,IAAK9L,KAAKkL,aAAaO,aACnB,MAAM,IAAIxI,MAAM,qBAGpB6I,EAAaF,IAAEC,MAAMC,EAAY,EAAG,IACpCzD,QAAQC,IAAIwD,GACZ9L,KAAKmL,UAAUQ,YAAf,2CAA+DG,IAI/D,IAAMC,EAAWtL,KAAKuL,MAAoB,KAAbF,EAAqB,GAE5CG,EAAUxL,KAAKuL,OAAqB,GAAdF,EAAqB,IAEjD9L,KAAKmL,UAAUQ,YAAf,yDAA6EM,IAC7EjM,KAAKmL,UAAUQ,YAAf,uDAA2EI,IAE3E/L,KAAK8L,WAAaA,I,4BAQtB,SAAexI,GACXtD,KAAK8K,SAAW,KAChB9K,KAAKiL,YAAa,EAElBjL,KAAKkM,OAAO5I,EAAgB6I,SAC5BnM,KAAKmL,UAAUQ,YAAf,mBAAuC3L,KAAKgL,U,yBAMhD,WACI,OAAOhL,KAAKiL,WAAa,KAAOjL,KAAK8K,a,KCwE9BsB,E,kDAlKX,WAAYzM,GAAQ,IAAD,sBACf,cAAMA,GAEN,IAAM2D,EAAkB,IAAI6C,EAC5B7C,EAAgB+I,QAEhB,IAAMlB,EAAY,IAAIN,EANP,OAQf,EAAKxB,MAAQ,CACT/F,gBAAiBA,EACjBgJ,cAAe,KACfnB,UAAWA,EACXoB,oBAAqB,EACrBC,eAAgB,GAGpB,EAAKrL,YAAc,EAAKA,YAAYtB,KAAjB,gBACnB,EAAKI,UAAY,EAAKA,UAAUJ,KAAf,gBACjB,EAAKuK,YAAc,EAAKA,YAAYvK,KAAjB,gBAlBJ,E,qDAwBnB,c,yBAmCA,SAAYuB,GACJA,IAAUpB,KAAKqJ,MAAMiD,cAErBtM,KAAK0J,UAAS,SAAAC,GAAI,kCACXA,GADW,IAEd2C,cAAe,UAMnBtM,KAAK0J,UAAS,SAAAC,GAAI,kCACXA,GADW,IAEd2C,cAAelL,S,uBAU3B,SAAUtB,EAAKC,GACX,GAAKC,KAAKqJ,MAAMiD,cAAhB,CAKA,IAGM1I,EAHa5D,KAAKqJ,MAAMiD,cAAc5I,WACxC1D,KAAKqJ,MAAM/F,iBAESoB,QAAO,SAAAd,GAAS,IAAD,EAChBA,EAAKgH,aADW,mBAC5BjE,EAD4B,KACvBC,EADuB,KAEnC,OAAOD,IAAQ7G,GAAO8G,IAAQ7G,KAC/B,GACC6D,EACA5D,KAAKqJ,MAAM/F,gBAAgBM,KAAKA,GAEhCyE,QAAQC,IAAI,gBAGhB,IAAMmE,EAAqBtG,EAAgB8D,QAAQjK,KAAKqJ,MAAM/F,gBAAgB6I,SAE9EnM,KAAK0J,UAAS,SAAAC,GAAI,kCACXA,GADW,IAEdrG,gBAAiBmJ,EACjBH,cAAe,eAtBfjE,QAAQC,IAAI,uB,yBA8BpB,SAAYgB,GACR,IAAMmD,EAAqBtG,EAAgB8D,QAAQX,GACnDtJ,KAAK0J,UAAS,SAAAC,GAAI,kCACXA,GADW,IAEdrG,gBAAiBmJ,S,oBAOzB,WAAU,IAAD,OACC7E,EAAc5H,KAAKqJ,MAAM/F,gBAAgBoJ,YAC/C,OACI,gCACI,cAAC,EAAD,CAAczM,UAAWD,KAAKC,YAE1B2H,EAAYvH,KAAI,SAAAe,GAAK,OACjB,cAAC,EAAD,CAEIA,MAAOA,EACPE,UACIF,aAAiBqE,GACd,EAAK4D,MAAM/F,gBAAgBwC,YAAY1E,EAAMC,OAEpDF,YAAa,kBAAM,EAAKA,YAAYC,KAPxC,qBACuBA,EAAM8B,QAUjClD,KAAKqJ,MAAMiD,cACL,cAAC,EAAD,CACE5I,WACI1D,KAAKqJ,MAAMiD,cAAc5I,WACrB1D,KAAKqJ,MAAM/F,iBAGnBrD,UAAWD,KAAKC,YAClB,wBAEV,cAAC,EAAD,CACIqJ,QAAStJ,KAAKqJ,MAAM/F,gBAAgB6I,QACpC/B,YAAapK,KAAKoK,qB,GA7JZzJ,IAAMC,WCNhC+L,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6011aa3c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ChessBoardUI.css';\n\nclass ChessBoardUI extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    handleOnClick(row, col) {\n        this.props.movePiece(row, col)\n    }\n\n    render() {\n        return (\n            <div className=\"chess-board\">\n                {\n                    new Array(64).fill(null).map((square, idx) =>\n                        <div\n                            key={`square${idx}`}\n                            onClick={() => this.handleOnClick(\n                                Math.floor(idx / 8),\n                                idx % 8,\n                            )}>\n                        </div>\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nChessBoardUI.propTypes = {\n    movePiece: PropTypes.func.isRequired,\n}\n\nexport default ChessBoardUI;","const Color = {\n    WHITE: 0,\n    BLACK: 1,\n}\nObject.freeze(Color);\n\nexport default Color;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ChessPieceUI.css';\nimport Color from '../../utils/color';\n\n/**\n * A chess piece on the game board.\n */\nclass ChessPieceUI extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    handleOnClick() {\n        this.props.selectPiece();\n    }\n\n    /**\n     * Render ChessPiece.\n     */\n    render() {\n        let className = \"chess-piece\";\n        if (this.props.piece.color === Color.WHITE) {\n            className += \" white\";\n        }\n        if (this.props.isInCheck) {\n            className += \" in-check\";\n        }\n\n        return (\n            <div\n                className={className}\n                style={{\n                    top: `${this.props.piece.row * 50}px`,\n                    left: `${this.props.piece.col * 50}px`,\n                }}\n                onClick={this.handleOnClick} >\n                {this.props.piece.icon}\n            </div>\n        );\n    }\n}\n\nChessPieceUI.propTypes = {\n    piece: PropTypes.object.isRequired,\n    isInCheck: PropTypes.bool.isRequired,\n    selectPiece: PropTypes.func.isRequired,\n}\n\nexport default ChessPieceUI;","/**\n * Convert (row, col) pair to fileRank.\n * @param {Array<number>} rowCol\n */\nexport function rowCol2FileRank(rowCol) {\n    const [row, col] = rowCol;\n    if (!typeof row === 'number') {\n        throw TypeError('Row must be a number');\n    }\n    if (!typeof col === 'number') {\n        throw TypeError('Column must be a number');\n    }\n    if (row < 0 || row > 7) {\n        return null;\n    }\n    if (col < 0 || col > 7) {\n        return null;\n    }\n\n    const file = String.fromCharCode(col + 97);\n    const rank = 8 - row;\n    return `${file}${rank}`;\n}\n\n/**\n * Convert fileRank to (row, col).\n * @param {string} fileRank\n */\nexport function fileRank2RowCol(fileRank) {\n    if (!typeof fileRank === 'string' || fileRank.length !== 2 || fileRank.toLowerCase() !== fileRank) {\n        throw TypeError('FileRank must be 2-character lowercase string');\n    }\n\n    const file = fileRank[0];\n    const rank = Number(fileRank[1]);\n    if (file < 'a' || file > 'h') {\n        throw RangeError('File out of bounds');\n    }\n    if (rank < 1 || rank > 8) {\n        throw RangeError('Rank out of bounds');\n    }\n\n    const row = 8 - rank;\n    const col = file.charCodeAt(0) - 97;\n    return [row, col];\n}\n","import { fileRank2RowCol } from \"../utils/board\";\n\nclass Move {\n    /**\n     * Construct Move\n     * @param {string} to fileRank\n     * @param {string} from fileRank\n     * @param {string} promotion promotion i.e. /[qrbn]/\n     */\n    constructor(from, to, promotion) {\n        this.from = from;\n        this.to = to;\n        this.promotion = promotion;\n    }\n\n    fromToRowCol() {\n        return fileRank2RowCol(this.from);\n    }\n\n    toToRowCol() {\n        return fileRank2RowCol(this.to);\n    }\n}\n\nexport default Move;","import ChessBoardState from './ChessBoardState';\nimport Color from '../utils/color';\nimport Move from './Move';\nimport { rowCol2FileRank } from '../utils/board';\n\n/**\n * A chess piece on the game board.\n */\nclass ChessPiece {\n    static count = 0;\n\n    /**\n     * @constructor\n     * @param {string} icon\n     * @param {string} printIcon Icon for debug/print\n     * @param {string} notation\n     * @param {Color} color\n     * @param {number} row\n     * @param {number} col\n     */\n    constructor(icon, printIcon, notation, color, row, col) {\n        if (this.constructor == ChessPiece) {\n            throw new Error('Cannot instantiate abstract class ChessPiece');\n        }\n\n        this.id = ChessPiece.count;\n        this.icon = icon;\n        this.printIcon = printIcon;\n        this.notation = notation;\n        this.color = color;\n        this.row = row;\n        this.col = col;\n\n        ChessPiece.count++;\n    }\n\n    /**\n     * Move the ChessPiece to the designated (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    move(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n\n    /**\n     * Get fileRank of piece.\n     */\n    getFileRank() {\n        return rowCol2FileRank([this.row, this.col]);\n    }\n\n    /**\n     * Get a move from this piece's location to the specified location.\n     * @param {Array<number>} to [row, col]\n     * @param {string} promotion promotion i.e. /[qrbn]/\n     */\n    getMoveRowCol(toRowCol, promotion = null) {\n        const from = rowCol2FileRank([this.row, this.col]);\n        const to = rowCol2FileRank(toRowCol);\n        return new Move(from, to, promotion);\n    }\n\n    /**\n     * Get a move from this piece's location to the specified location.\n     * @param {string} to fileRank\n     * @param {string} promotion promotion i.e. /[qrbn]/\n     */\n    getMoveFileRank(toFileRank, promotion = null) {\n        const from = rowCol2FileRank([this.row, this.col]);\n        const to = toFileRank;\n        return new Move(from, to, promotion);\n    }\n\n    /**\n     * Helper function for finding valid moves along a line, i.e orthogonally\n     * or on a diagonal.\n     * @param {ChessBoardState} chessBoardState\n     * @param {number} rowInc row increment\n     * @param {number} colInc col increment\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     */\n    _validMovesAlongLine(chessBoardState, rowInc, colInc, checkIfKingInCheck) {\n        const validMoves = [];\n\n        let pieceAtTarget = null;\n        let move = null;\n        let row = this.row + rowInc;\n        let col = this.col + colInc;\n\n        while (row >= 0 && row <= 7 && col >= 0 && col <= 7) {\n            pieceAtTarget = chessBoardState.get(row, col);\n            move = this.getMoveRowCol([row, col]);\n\n            if (pieceAtTarget) {\n                if (pieceAtTarget.isEnemyOf(this.color)) {\n                    if (checkIfKingInCheck) {\n                        if (!chessBoardState.kingWouldBeInCheck(this.color, move)) {\n                            validMoves.push(move);\n                        }\n                    } else {\n                        validMoves.push(move);\n                    }\n                }\n                break;\n            } else {\n                if (checkIfKingInCheck) {\n                    if (!chessBoardState.kingWouldBeInCheck(this.color, move)) {\n                        validMoves.push(move);\n                    }\n                } else {\n                    validMoves.push(move);\n                }\n            }\n            row += rowInc;\n            col += colInc;\n        }\n\n        return validMoves;\n    }\n\n    /**\n     * Returns a set of valid moves for the ChessPiece.\n     * @param {ChessBoardState} chessBoardState\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck) {\n        throw new Error('Method validMoves() must be implemented.');\n    }\n\n    /**\n     * Returns whether piece belongs to opponent of this piece's color.\n     * @param {Color} color\n     */\n    isEnemyOf(color) {\n        return color !== this.color;\n    }\n}\n\nexport default ChessPiece;\n","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Color from '../utils/color';\n\nclass Bishop extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♝';\n        const printIcon = color === Color.WHITE ? '♗' : '♝';\n        const notation = color === Color.WHITE ? 'B' : 'b';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Bishop.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const upLeftMoves = this._validMovesAlongLine(chessBoardState, -1, -1, checkIfKingInCheck);\n        const upRightMoves = this._validMovesAlongLine(chessBoardState, -1, 1, checkIfKingInCheck);\n        const downLeftMoves = this._validMovesAlongLine(chessBoardState, 1, -1, checkIfKingInCheck)\n        const downRightMoves = this._validMovesAlongLine(chessBoardState, 1, 1, checkIfKingInCheck)\n        return [...upLeftMoves, ...upRightMoves, ...downLeftMoves, ...downRightMoves];\n    }\n}\n\nexport default Bishop;","import ChessBoardState from \"./ChessBoardState\";\nimport ChessPiece from \"./ChessPiece\";\nimport Move from \"./Move\";\nimport Color from \"../utils/color\";\n\nclass Knight extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♞';\n        const printIcon = color === Color.WHITE ? '♘' : '♞';\n        const notation = color === Color.WHITE ? 'N' : 'n';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Bishop.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const possibleMoves = [\n            this.getMoveRowCol([this.row - 2, this.col - 1]),\n            this.getMoveRowCol([this.row - 2, this.col + 1]),\n            this.getMoveRowCol([this.row - 1, this.col + 2]),\n            this.getMoveRowCol([this.row + 1, this.col + 2]),\n            this.getMoveRowCol([this.row + 2, this.col + 1]),\n            this.getMoveRowCol([this.row + 2, this.col - 1]),\n            this.getMoveRowCol([this.row + 1, this.col - 2]),\n            this.getMoveRowCol([this.row - 1, this.col - 2]),\n        ];\n\n        let pieceAtTarget = null;\n        const validMoves = possibleMoves.filter(move => {\n            if (move.to === null) {\n                return false;\n            }\n\n            pieceAtTarget = chessBoardState.getFileRank(move.to)\n            if (!pieceAtTarget) {\n                return true;\n            }\n            else if (pieceAtTarget && pieceAtTarget.isEnemyOf(this.color)) {\n                return true;\n            }\n            return false;\n        });\n\n        if (checkIfKingInCheck) {\n            return validMoves.filter(move =>\n                !chessBoardState.kingWouldBeInCheck(this.color, move)\n            );\n        }\n\n        return validMoves;\n    }\n}\n\nexport default Knight;","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Color from '../utils/color';\n\nclass Queen extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♛';\n        const printIcon = color === Color.WHITE ? '♕' : '♛';\n        const notation = color === Color.WHITE ? 'Q' : 'q';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Queen.\n     * @param {ChessBoardState} chessBoardState\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const upLeftMoves = this._validMovesAlongLine(chessBoardState, -1, -1, checkIfKingInCheck);\n        const upRightMoves = this._validMovesAlongLine(chessBoardState, -1, 1, checkIfKingInCheck);\n        const downLeftMoves = this._validMovesAlongLine(chessBoardState, 1, -1, checkIfKingInCheck)\n        const downRightMoves = this._validMovesAlongLine(chessBoardState, 1, 1, checkIfKingInCheck)\n        const upMoves = this._validMovesAlongLine(chessBoardState, -1, 0, checkIfKingInCheck);\n        const rightMoves = this._validMovesAlongLine(chessBoardState, 0, 1, checkIfKingInCheck);\n        const downMoves = this._validMovesAlongLine(chessBoardState, 1, 0, checkIfKingInCheck)\n        const leftMoves = this._validMovesAlongLine(chessBoardState, 0, -1, checkIfKingInCheck)\n        return [\n            ...upMoves, ...rightMoves, ...downMoves, ...leftMoves,\n            ...upLeftMoves, ...upRightMoves, ...downLeftMoves, ...downRightMoves\n        ];\n    }\n}\n\nexport default Queen;","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Move from './Move';\nimport Queen from './Queen';\nimport { rowCol2FileRank } from '../utils/board';\nimport Color from '../utils/color';\n\nclass Pawn extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♟';\n        const printIcon = color === Color.WHITE ? '♙' : '♟';\n        const notation = color === Color.WHITE ? 'P' : 'p';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns whether the pawn has already moved.\n     */\n    hasMoved() {\n        return (this.color === Color.WHITE && this.row !== 6)\n            || (this.color === Color.BLACK && this.row !== 1);\n    }\n\n    /**\n     * Overrides parent getMove to allow for promotion.\n     * @param {Array<number>} to [row, col]\n     */\n    getMoveRowCol(toRowCol) {\n        const [row, col] = toRowCol;\n        // Queen promotion\n        const promotion = (row === 0 || row === 7) ? 'q' : null;\n        return super.getMoveRowCol(toRowCol, promotion);\n    }\n\n    /**\n     * Returns an array of valid moves for the Pawn.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const validMoves = [];\n\n        // Movement (1 space)\n        if (this.color === Color.WHITE) {\n            if (this.row > 0 && chessBoardState.get(this.row - 1, this.col) === null) {\n                validMoves.push(this.getMoveRowCol([this.row - 1, this.col]));\n            }\n        }\n        else if (this.color === Color.BLACK) {\n            if (this.row < 7 && chessBoardState.get(this.row + 1, this.col) === null) {\n                validMoves.push(this.getMoveRowCol([this.row + 1, this.col]));\n            }\n        }\n\n        // Movement (2 spaces)\n        if (!this.hasMoved()) {\n            if (this.color === Color.WHITE) {\n                if (this.row > 1\n                    && chessBoardState.get(this.row - 1, this.col) === null\n                    && chessBoardState.get(this.row - 2, this.col) === null) {\n                    validMoves.push(this.getMoveRowCol([this.row - 2, this.col]));\n                }\n            } else if (this.color === Color.BLACK) {\n                if (this.row < 6\n                    && chessBoardState.get(this.row + 1, this.col) === null\n                    && chessBoardState.get(this.row + 2, this.col) === null) {\n                    validMoves.push(this.getMoveRowCol([this.row + 2, this.col]));\n                }\n            }\n        }\n\n        const leftPiece = chessBoardState.get(this.row, this.col - 1);\n        const rightPiece = chessBoardState.get(this.row, this.col + 1);\n\n        // Take\n        if (this.color === Color.WHITE) {\n            // Top left\n            if (this.row > 0 && this.col > 0) {\n                const topLeftPiece = chessBoardState.get(this.row - 1, this.col - 1);\n                if (topLeftPiece && topLeftPiece.isEnemyOf(this.color)) {\n                    validMoves.push(this.getMoveRowCol([this.row - 1, this.col - 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row - 1, this.col - 1])) {\n                    // En passant\n                    validMoves.push(this.getMoveRowCol([this.row - 1, this.col - 1]));\n                }\n            }\n            // Top right\n            if (this.row > 0 && this.col < 7) {\n                const topRightPiece = chessBoardState.get(this.row - 1, this.col + 1);\n                if (topRightPiece && topRightPiece.isEnemyOf(this.color)) {\n                    validMoves.push(this.getMoveRowCol([this.row - 1, this.col + 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row - 1, this.col + 1])) {\n                    // En passant\n                    validMoves.push(this.getMoveRowCol([this.row - 1, this.col + 1]));\n                }\n            }\n        } else if (this.color === Color.BLACK) {\n            // Bottom left\n            if (this.row < 7 && this.col > 0) {\n                const bottomLeftPiece = chessBoardState.get(this.row + 1, this.col - 1);\n                if (bottomLeftPiece && bottomLeftPiece.isEnemyOf(this.color)) {\n                    validMoves.push(this.getMoveRowCol([this.row + 1, this.col - 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row + 1, this.col - 1])) {\n                    // En passant\n                    validMoves.push(this.getMoveRowCol([this.row + 1, this.col - 1]));\n                }\n            }\n            // Bottom right\n            if (this.row < 7 && this.col < 7) {\n                const bottomRightPiece = chessBoardState.get(this.row + 1, this.col + 1);\n                if (bottomRightPiece && bottomRightPiece.isEnemyOf(this.color)) {\n                    validMoves.push(this.getMoveRowCol([this.row + 1, this.col + 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row + 1, this.col + 1])) {\n                    // En passant\n                    validMoves.push(this.getMoveRowCol([this.row + 1, this.col + 1]));\n                }\n            }\n        }\n\n        if (checkIfKingInCheck) {\n            return validMoves.filter(move => {\n                return !chessBoardState.kingWouldBeInCheck(this.color, move)\n            });\n        }\n\n        return validMoves;\n    }\n}\n\nexport default Pawn;","import ChessBoardState from \"./ChessBoardState\";\nimport ChessPiece from './ChessPiece';\nimport Color from '../utils/color';\n\nclass Rook extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♜';\n        const printIcon = color === Color.WHITE ? '♖' : '♜';\n        const notation = color === Color.WHITE ? 'R' : 'r';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Move the Rook to the designated (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    move(row, col) {\n        super.move(row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Rook.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const upMoves = this._validMovesAlongLine(chessBoardState, -1, 0, checkIfKingInCheck);\n        const downMoves = this._validMovesAlongLine(chessBoardState, 1, 0, checkIfKingInCheck)\n        const rightMoves = this._validMovesAlongLine(chessBoardState, 0, 1, checkIfKingInCheck);\n        const leftMoves = this._validMovesAlongLine(chessBoardState, 0, -1, checkIfKingInCheck)\n        return [...upMoves, ...rightMoves, ...downMoves, ...leftMoves];\n    }\n}\n\nexport default Rook;","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Move from './Move';\nimport Rook from './ChessPiece';\nimport Color from '../utils/color';\n\nclass King extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♚';\n        const printIcon = color === Color.WHITE ? '♔' : '♚';\n        const notation = color === Color.WHITE ? 'K' : 'k';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Move the King to the designated (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    move(row, col) {\n        super.move(row, col);\n    }\n\n    /**\n     * Returns whether queenside castle still available.\n     * @param {ChessBoardState} chessBoardState\n     */\n    queenSideCastleAvailable(chessBoardState) {\n        const codeToMatch = this.color === Color.WHITE ? 'Q' : 'q';\n        return chessBoardState.castleAvailable(codeToMatch);\n    }\n\n    /**\n     * Returns whether king can queenside castle\n     * @param {ChessBoardState} chessBoardState\n     */\n    canQueenSideCastle(chessBoardState) {\n        // 1. The castling must be queenside\n        let rank = this.color === Color.WHITE ? 1 : 8;\n        // 2. Neither the king nor the chosen rook has previously moved\n        if (!this.queenSideCastleAvailable(chessBoardState)) {\n            return false;\n        }\n        // 3. There are no pieces between the king and the chosen rook\n        if (\n            chessBoardState.fileRankOccupied(`b${rank}`)\n            || chessBoardState.fileRankOccupied(`c${rank}`)\n            || chessBoardState.fileRankOccupied(`d${rank}`)\n        ) {\n            return false;\n        }\n        // 4. The king is not currently in check\n        if (chessBoardState.kingInCheck(this.color)) {\n            return false;\n        }\n        // 5/6. The king would not pass through check or end up in check\n        if (chessBoardState.kingWouldBeInCheck(this.color, this.getMoveFileRank(`d${rank}`))\n            || chessBoardState.kingWouldBeInCheck(this.color, this.getMoveFileRank(`c${rank}`))) {\n            return false\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns whether kingside castle still available.\n     * @param {ChessBoardState} chessBoardState\n     */\n    kingSideCastleAvailable(chessBoardState) {\n        const codeToMatch = this.color === Color.WHITE ? 'K' : 'k';\n        return chessBoardState.castleAvailable(codeToMatch);\n    }\n\n    /**\n     * Returns whether king can kingside castle\n     * @param {ChessBoardState} chessBoardState\n     */\n    canKingSideCastle(chessBoardState) {\n        // 1. The castling must be queenside\n        let rank = this.color === Color.WHITE ? 1 : 8;\n        // 2. Neither the king nor the chosen rook has previously moved\n        if (!this.kingSideCastleAvailable(chessBoardState)) {\n            return false;\n        }\n        // 3. There are no pieces between the king and the chosen rook\n        if (\n            chessBoardState.fileRankOccupied(`f${rank}`)\n            || chessBoardState.fileRankOccupied(`g${rank}`)\n        ) {\n            return false;\n        }\n        // 4. The king is not currently in check\n        if (chessBoardState.kingInCheck(this.color)) {\n            return false;\n        }\n        // 5/6. The king would not pass through check or end up in check\n        if (chessBoardState.kingWouldBeInCheck(this.color, this.getMoveFileRank(`f${rank}`))\n            || chessBoardState.kingWouldBeInCheck(this.color, this.getMoveFileRank(`g${rank}`))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns an array of valid moves for the King.\n     * @param {ChessBoardState} chessBoardState\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const possibleMoves = [\n            this.getMoveRowCol([this.row - 1, this.col]),\n            this.getMoveRowCol([this.row - 1, this.col + 1]),\n            this.getMoveRowCol([this.row, this.col + 1]),\n            this.getMoveRowCol([this.row + 1, this.col + 1]),\n            this.getMoveRowCol([this.row + 1, this.col]),\n            this.getMoveRowCol([this.row + 1, this.col - 1]),\n            this.getMoveRowCol([this.row, this.col - 1]),\n            this.getMoveRowCol([this.row - 1, this.col - 1]),\n        ];\n\n        let pieceAtTarget = null;\n        const validMoves = possibleMoves.filter(move => {\n            if (move.to === null) {\n                return false;\n            }\n\n            pieceAtTarget = chessBoardState.getFileRank(move.to);\n            if (!pieceAtTarget) {\n                return true;\n            }\n            else if (pieceAtTarget && pieceAtTarget.isEnemyOf(this.color)) {\n                return true;\n            }\n            return false;\n        });\n\n        if (checkIfKingInCheck) {\n            const rank = this.color === Color.WHITE ? 1 : 8;\n            if (this.canQueenSideCastle(chessBoardState)) {\n                validMoves.push(this.getMoveFileRank(`c${rank}`));\n            }\n            if (this.canKingSideCastle(chessBoardState)) {\n                validMoves.push(this.getMoveFileRank(`g${rank}`));\n            }\n        }\n\n        if (checkIfKingInCheck) {\n            return validMoves.filter(move =>\n                !chessBoardState.kingWouldBeInCheck(this.color, move)\n            );\n        }\n\n        return validMoves;\n    }\n}\n\nexport default King;","import { cloneDeep } from 'lodash';\n\nimport Bishop from './Bishop';\nimport Knight from './Knight';\nimport Pawn from './Pawn';\nimport Rook from './Rook';\nimport Queen from './Queen';\nimport King from './King';\nimport ChessPiece from './ChessPiece';\nimport Move from './Move';\nimport { fileRank2RowCol, rowCol2FileRank } from '../utils/board';\nimport Color from '../utils/color';\n\n/**\n * Handles the state of the chess board and its pieces.\n */\nclass ChessBoardState {\n    constructor() {\n        this.board = [\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n        ]\n        this.currentPlayer = Color.WHITE;\n        this.availableCastles = '-';\n        this.enPassantTarget = '-';\n        this.halfMoveClock = 0;\n        this.fullMoveNumber = 1;\n    }\n\n    /**\n     * Returns the piece at (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    get(row, col) {\n        return this.board[row][col];\n    }\n\n    /**\n     * Returns the piece at (file, rank).\n     * @param {string} fileRank\n     */\n    getFileRank(fileRank) {\n        const [row, col] = fileRank2RowCol(fileRank);\n        return this.board[row][col];\n    }\n\n    /**\n     * Returns whether (file, rank) occupied by piece\n     * @param {string} fileRank\n     */\n    fileRankOccupied(fileRank) {\n        const [row, col] = fileRank2RowCol(fileRank);\n        return this.board[row][col] !== null;\n    }\n\n    /**\n     * Sets the piece at (file, rank).\n     * @param {string} fileRank\n     * @param {ChessPiece} piece\n     */\n    setFileRank(fileRank, piece) {\n        const [row, col] = fileRank2RowCol(fileRank);\n        this.board[row][col] = piece;\n    }\n\n    /**\n     * Reset the game board.\n     */\n    reset() {\n        this.board = [\n            [new Rook(Color.BLACK, 0, 0), new Knight(Color.BLACK, 0, 1), new Bishop(Color.BLACK, 0, 2), new Queen(Color.BLACK, 0, 3), new King(Color.BLACK, 0, 4), new Bishop(Color.BLACK, 0, 5), new Knight(Color.BLACK, 0, 6), new Rook(Color.BLACK, 0, 7)],\n            [new Pawn(Color.BLACK, 1, 0), new Pawn(Color.BLACK, 1, 1), new Pawn(Color.BLACK, 1, 2), new Pawn(Color.BLACK, 1, 3), new Pawn(Color.BLACK, 1, 4), new Pawn(Color.BLACK, 1, 5), new Pawn(Color.BLACK, 1, 6), new Pawn(Color.BLACK, 1, 7)],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [new Pawn(Color.WHITE, 6, 0), new Pawn(Color.WHITE, 6, 1), new Pawn(Color.WHITE, 6, 2), new Pawn(Color.WHITE, 6, 3), new Pawn(Color.WHITE, 6, 4), new Pawn(Color.WHITE, 6, 5), new Pawn(Color.WHITE, 6, 6), new Pawn(Color.WHITE, 6, 7)],\n            [new Rook(Color.WHITE, 7, 0), new Knight(Color.WHITE, 7, 1), new Bishop(Color.WHITE, 7, 2), new Queen(Color.WHITE, 7, 3), new King(Color.WHITE, 7, 4), new Bishop(Color.WHITE, 7, 5), new Knight(Color.WHITE, 7, 6), new Rook(Color.WHITE, 7, 7)],\n        ]\n        this.currentPlayer = Color.WHITE;\n        this.availableCastles = 'KQkq';\n        this.enPassantTarget = '-';\n        this.halfMoveClock = 0;\n        this.fullMoveNumber = 1;\n    }\n\n    /**\n     * Execute move.\n     * @param {Move} move\n     */\n    move(move) {\n        const [fromR, fromC] = fileRank2RowCol(move.from);\n        const [toR, toC] = fileRank2RowCol(move.to);\n\n        // Move piece\n        const piece = this.board[fromR][fromC];\n        this.board[fromR][fromC] = null;\n        this.board[toR][toC] = piece;\n        piece.move(toR, toC);\n\n        // Promotion\n        switch (move.promotion) {\n            case 'q':\n                this.board[toR][toC] = new Queen(this.currentPlayer, toR, toC);\n                break;\n            case 'r':\n                this.board[toR][toC] = new Rook(this.currentPlayer, toR, toC);\n                break;\n            case 'b':\n                this.board[toR][toC] = new Bishop(this.currentPlayer, toR, toC);\n                break;\n            case 'n':\n                this.board[toR][toC] = new Knight(this.currentPlayer, toR, toC);\n                break;\n            case null:\n                // no promotion\n                break;\n            default:\n                throw new Error('Invalid promotion value, should be /[qrbn]/');\n        }\n\n        // En passant (capture)\n        if (piece instanceof Pawn && move.to === this.enPassantTarget) {\n            if (piece.color === Color.WHITE) {\n                this.board[toR + 1][toC] = null;\n            } else if (piece.color === Color.BLACK) {\n                this.board[toR - 1][toC] = null;\n            }\n        }\n\n        // En passant (set)\n        if (piece instanceof Pawn && Math.abs(fromR - toR) === 2) {\n            if (piece.color === Color.WHITE) {\n                this.enPassantTarget = rowCol2FileRank([toR + 1, toC]);\n            } else if (piece.color === Color.BLACK) {\n                this.enPassantTarget = rowCol2FileRank([toR - 1, toC]);\n            }\n        } else {\n            this.enPassantTarget = '-';\n        }\n\n        // Castling (move)\n        if (piece instanceof King && Math.abs(fromC - toC) === 2) {\n            if (piece.color === Color.WHITE) {\n                if (move.to === 'g1') {\n                    // Kingside\n                    const rook = this.getFileRank('h1');\n                    this.setFileRank('f1', rook);\n                    this.setFileRank('h1', null);\n                } else if (move.to === 'c1') {\n                    // Queenside\n                    const rook = this.getFileRank('a1');\n                    this.setFileRank('d1', rook)\n                    this.setFileRank('a1', null);\n                } else {\n                    throw new Error('Invalid white king move');\n                }\n            } else if (piece.color === Color.BLACK) {\n                if (move.to === 'g8') {\n                    // Kingside\n                    const rook = this.getFileRank('h8');\n                    this.setFileRank('f8', rook);\n                    this.setFileRank('h8', null);\n                } else if (move.to === 'c8') {\n                    // Queenside\n                    const rook = this.getFileRank('a8');\n                    this.setFileRank('d8', rook)\n                    this.setFileRank('a8', null);\n                } else {\n                    throw new Error('Invalid white king move');\n                }\n            }\n        }\n\n        // Castling (invalidate)\n        if (piece instanceof King) {\n            if (piece.color === Color.WHITE) {\n                this.invalidateCastle('KQ');\n            } else if (piece.color === Color.BLACK) {\n                this.invalidateCastle('kq');\n            }\n        }\n        if (piece instanceof Rook) {\n            if (piece.color === Color.WHITE) {\n                if (move.from === 'a1') {\n                    this.invalidateCastle('Q');\n                } else if (move.from === 'h1') {\n                    this.invalidateCastle('K');\n                }\n            } else if (piece.color === Color.BLACK) {\n                if (move.from === 'a8') {\n                    this.invalidateCastle('q');\n                } else if (move.from === 'h8') {\n                    this.invalidateCastle('k');\n                }\n            }\n        }\n\n        // Update halfMoveClock\n        if (piece instanceof Pawn || piece instanceof King) {\n            this.halfMoveClock = 0;\n        } else {\n            this.halfMoveClock++;\n        }\n\n        // Toggle currentPlayer\n        this.currentPlayer = this.currentPlayer === Color.WHITE\n            ? Color.BLACK\n            : Color.WHITE;\n\n        // Update fullMoveNumber\n        if (this.currentPlayer === Color.WHITE) {\n            this.fullMoveNumber++;\n        }\n    }\n\n    /**\n     * Remove piece from board.\n     * @param {number} row\n     * @param {number} col\n     */\n    removePiece(row, col) {\n        this.board[row][col] = null;\n    }\n\n    /**\n     * Check if castle opportunity available\n     * e.g. 'KQkq' -> invalidateCastle('Q') -> returns true\n     * e.g. 'Kkq' -> invalidateCastle('KQ') -> returns false\n     * @param {string} castleCode\n     */\n    castleAvailable(castleCode) {\n        return this.availableCastles.includes(castleCode);\n    }\n\n    /**\n     * Invalidate castle opportunity\n     * e.g. 'KQkq' -> invalidateCastle('Q') -> 'Kkq'\n     * e.g. 'KQkq' -> invalidateCastle('kq') -> 'KQ'\n     * @param {string} castleCode\n     */\n    invalidateCastle(castleCode) {\n        this.availableCastles = this.availableCastles.replace(castleCode, '');\n\n        if (this.availableCastles === '') {\n            this.availableCastles = '-';\n        }\n    }\n\n    /**\n     * Returns whether king of given color is currently in check.\n     * @param {Color} color\n     * @returns {boolean} King currently in check\n     */\n    kingInCheck(color) {\n        const king = this.getPiecesFor(color, King)[0];\n        const enemyPieces = this.getPiecesFor(\n            color === Color.WHITE ? Color.BLACK : Color.WHITE\n        );\n\n        for (let i = 0; i < enemyPieces.length; i++) {\n            const enemyPiece = enemyPieces[i];\n            const validMoves = enemyPiece.validMoves(this, false);\n            const validMovesOnKing = validMoves.filter(\n                move => move.to === king.getFileRank()\n            )\n            if (validMovesOnKing.length > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether king of given color is currently in checkmate.\n     * @param {Color} color\n     * @returns {boolean} King in checkmate\n     */\n    kingInCheckmate(color) {\n        if (!this.kingInCheck(color)) {\n            return false;\n        }\n\n        const pieces = this.getPiecesFor(color);\n        const validMoves = [];\n        pieces.forEach(piece => {\n            validMoves.push(...piece.validMoves(this));\n        });\n\n        return validMoves.length === 0;\n    }\n\n    /**\n     * Returns whether king of given color would be in check after the given\n     * move.\n     * @param {Color} color\n     * @param {number} r1 row1\n     * @param {number} c1 col1\n     * @param {number} r2 row2\n     * @param {number} c2 col2\n     * @returns {boolean} King would be in check\n     */\n    kingWouldBeInCheck(color, move) {\n        const cloneState = cloneDeep(this);\n        cloneState.move(move);\n        return cloneState.kingInCheck(color);\n    }\n\n    /**\n     * Returns an array of all pieces on the board.\n     * @returns {Array<ChessPiece>}\n     */\n    getPieces() {\n        const chessPieces = [];\n        this.board.forEach(row => {\n            row.forEach(piece => {\n                if (piece !== null) {\n                    chessPieces.push(piece);\n                }\n            });\n        });\n        return chessPieces;\n    }\n\n    /**\n     * Returns an array of all pieces on the board for the given color.\n     * @param {Color} color\n     * @param {ChessPiece} type Type of piece to filter on\n     * @returns {Array<ChessPiece>}\n     */\n    getPiecesFor(color, type = null) {\n        const chessPieces = [];\n        this.board.forEach(row => {\n            row.forEach(piece => {\n                if ((piece !== null && piece.color === color)) {\n                    if (type === null || piece instanceof type) {\n                        chessPieces.push(piece);\n                    }\n                }\n            });\n        });\n        return chessPieces;\n    }\n\n    /**\n     * Generates board state from Forsyth-Edwards Notation.\n     * @param {string} fen\n     */\n    static fromFEN(fen) {\n        const split = fen.split(' ');\n\n        if (split.length !== 6) {\n            throw new Error('FEN string must have 6 components: [ranks activePlayer availableCastles enPassantTarget halfMoveClock fullMoveNumber]');\n        }\n\n        const rankStr = split[0];\n        const currentPlayerStr = split[1];\n        const availableCastlesStr = split[2];\n        const enPassantTargetStr = split[3];\n        const halfMoveClockStr = split[4];\n        const fullMoveNumberStr = split[5];\n\n        if (rankStr.indexOf('K') === -1 || rankStr.indexOf('k') === -1) {\n            throw new Error('Both white and black king must be present');\n        }\n\n        const chessBoardState = new ChessBoardState();\n\n        // 1. Ranks\n        let ranks = rankStr.split('/');\n        if (ranks.length !== 8) {\n            throw new RangeError('FEN must contain 8 ranks');\n        }\n        for (let rank = 0; rank < 8; rank++) {\n            let file = 0;\n            for (let i = 0; i < ranks[rank].length; i++) {\n                const char = ranks[rank][i];\n\n                if ((char >= '1' && char <= '8')\n                    || (['P', 'N', 'B', 'R', 'Q', 'K'].includes(char.toUpperCase()))) {\n                    // ok\n                } else {\n                    throw new Error('Invalid rank notation char');\n                }\n\n                // Empty spaces, ignore\n                if (char >= '1' && char <= '8') {\n                    file += Number(char);\n                    continue;\n                }\n\n                const color = char === char.toUpperCase()\n                    ? Color.WHITE\n                    : Color.BLACK;\n                let piece;\n                switch (char.toLowerCase()) {\n                    case 'p':\n                        piece = new Pawn(color, rank, file);\n                        break;\n                    case 'n':\n                        piece = new Knight(color, rank, file);\n                        break;\n                    case 'b':\n                        piece = new Bishop(color, rank, file);\n                        break;\n                    case 'r':\n                        piece = new Rook(color, rank, file);\n                        break;\n                    case 'q':\n                        piece = new Queen(color, rank, file);\n                        break;\n                    case 'k':\n                        piece = new King(color, rank, file);\n                        break;\n                    default:\n                        throw new Error('Invalid piece notation');\n                }\n\n                chessBoardState.board[rank][file] = piece;\n                file++;\n            }\n\n            if (file < 7 || file > 8) {\n                // Not the best check, could end up with idx 7 or 8, depending on logic\n                throw new Error('File must contain 8 pieces');\n            }\n        }\n\n        // 2. Active Player\n        switch (currentPlayerStr) {\n            case 'w':\n                chessBoardState.currentPlayer = Color.WHITE;\n                break;\n            case 'b':\n                chessBoardState.currentPlayer = Color.BLACK;\n                break;\n            default:\n                throw new Error('Invalid active color notation')\n        }\n\n        // 3. Available Castles\n        if (!availableCastlesStr.match('(\\-|K?Q?k?q?)')) {\n            throw new Error('Malformed available castles')\n        }\n        chessBoardState.availableCastles = availableCastlesStr;\n\n        // 4. En Passant Target\n        if (\n            (enPassantTargetStr.length === 1 && enPassantTargetStr === '-')\n            || (\n                enPassantTargetStr.length === 2\n                && (enPassantTargetStr[0] >= 'a' && enPassantTargetStr[0] <= 'h')\n                && (enPassantTargetStr[1] >= 1 && enPassantTargetStr[1] <= 8)\n            )\n        ) {\n            // ok\n        } else {\n            throw new Error('Malformed en passant target');\n        }\n        chessBoardState.enPassantTarget = enPassantTargetStr;\n\n        // 5. Half Move Clock\n        if (isNaN(halfMoveClockStr)\n            || parseInt(halfMoveClockStr) != halfMoveClockStr\n            || parseInt(halfMoveClockStr) < 0) {\n            throw new Error('Half Move Clock must be an integer >= 0')\n        }\n        chessBoardState.halfMoveClock = Number(halfMoveClockStr);\n\n        // 6. Full Move Number\n        if (isNaN(fullMoveNumberStr)\n            || parseInt(fullMoveNumberStr) != fullMoveNumberStr\n            || parseInt(fullMoveNumberStr) < 1) {\n            throw new Error('Full Move Number must be a positive integer')\n        }\n        chessBoardState.fullMoveNumber = Number(fullMoveNumberStr);\n\n        return chessBoardState;\n    }\n\n    /**\n     * Returns Forsyth–Edwards Notation for board state.\n     */\n    toFEN() {\n        let ranks = [];\n        this.board.forEach(rank => {\n            let ranksStr = '';\n            let emptySpaces = 0;\n            rank.forEach(piece => {\n                if (piece === null) {\n                    emptySpaces++;\n                } else {\n                    if (emptySpaces) {\n                        ranksStr += emptySpaces;\n                        emptySpaces = 0;\n                    }\n                    ranksStr += piece.notation;\n                }\n            });\n            if (emptySpaces) {\n                ranksStr += emptySpaces;\n            }\n            ranks.push(ranksStr);\n        });\n\n        let fen = ranks.join('/');\n\n        fen += this.currentPlayer === Color.WHITE ? ' w' : ' b';\n\n        fen += ` ${this.availableCastles}`;\n        fen += ` ${this.enPassantTarget}`;\n        fen += ` ${this.halfMoveClock}`;\n        fen += ` ${this.fullMoveNumber}`;\n\n        return fen;\n    }\n\n    /**\n     * Pretty print the board state to the console.\n     */\n    print() {\n        let rowStrings = [];\n        this.board.forEach(row => {\n            let rowString = '';\n            row.forEach(piece => {\n                rowString += piece === null ? '.' : piece.printIcon;\n            })\n            rowStrings.push(rowString);\n        })\n        console.log(rowStrings.join('\\n'));\n    }\n}\n\nexport default ChessBoardState;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './FENFormUI.css';\nimport ChessBoardState from '../../objects/ChessBoardState';\n\nclass FENFormUI extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { fenCode: this.props.fenCode };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    /**\n     * Save props into state on update.\n     * @param {object} prevProps\n     */\n    componentDidUpdate(prevProps) {\n        if (prevProps.fenCode !== this.props.fenCode) {\n            this.setState(prev => ({\n                ...prev,\n                fenCode: this.props.fenCode,\n            }));\n        }\n    }\n\n    /**\n     * Handle change\n     * @param {object} event\n     */\n    handleChange(e) {\n        this.setState(prev => ({\n            ...prev,\n            fenCode: e.target.value,\n            errorStr: '',\n        }));\n    }\n\n    /**\n     * Handle submit\n     * @param {object} event\n     */\n    handleSubmit(e) {\n        e.preventDefault();\n        try {\n            ChessBoardState.fromFEN(this.state.fenCode);\n        } catch (error) {\n            this.setState(prev => ({\n                ...prev,\n                errorStr: error.message,\n            }));\n            return;\n        }\n        this.props.updateBoard(this.state.fenCode);\n    }\n\n    /**\n     * Render\n     */\n    render() {\n        return (\n            <div>\n                <form className=\"fen-form\" onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"fen-input\">FEN</label>\n                    <input\n                        className=\"fen-input\"\n                        name=\"fen-input\"\n                        type=\"text\"\n                        size=\"87\"\n                        maxLength=\"87\"\n                        value={this.state.fenCode}\n                        onChange={this.handleChange}\n                    >\n                    </input>\n                </form>\n                <p className=\"fen-form-error\">{this.state.errorStr}</p>\n            </div>\n        )\n    }\n}\n\nFENFormUI.propTypes = {\n    fenCode: PropTypes.string.isRequired,\n    updateBoard: PropTypes.func.isRequired,\n}\n\nexport default FENFormUI;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ValidMovesUI.css';\nimport Move from '../../objects/Move';\n\nclass ValidMovesUI extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    handleOnClick(row, col) {\n        this.props.movePiece(row, col);\n    }\n\n    /**\n     * Render ValidMovesUI.\n     */\n    render() {\n        return (\n            <div>\n                {\n                    this.props.validMoves.map((move, idx) => {\n                        const [row, col] = move.toToRowCol();\n                        return (\n                            <div\n                                key={`valid-move${idx}`}\n                                className=\"valid-move\"\n                                style={{\n                                    top: `${row * 50}px`,\n                                    left: `${col * 50}px`,\n                                }}\n                                onClick={() => this.handleOnClick(row, col)}>\n                                •\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nValidMovesUI.propTypes = {\n    validMoves: PropTypes.arrayOf(\n        PropTypes.shape({\n            from: PropTypes.string,\n            to: PropTypes.string,\n            promotion: PropTypes.string,\n        })\n    ).isRequired,\n    movePiece: PropTypes.func.isRequired,\n}\n\nexport default ValidMovesUI;","import _ from 'lodash';\n\nimport ChessBoardState from './ChessBoardState';\nimport Move from './Move';\n\nclass Stockfish {\n    constructor() {\n        this.bestMove = null;\n        this.skill = null;\n        this.depth = null;\n        this.isThinking = false;\n        this.engineStatus = {};\n\n        this.stockfish = new Worker('stockfish.js');\n        this.stockfish.onmessage = (event) => {\n            const line = event && typeof event === 'object' ? event.data : event;\n\n            console.log('Stockfish: ', line);\n\n            if (line === 'uciok') {\n                this.engineStatus.engineLoaded = true;\n            } else if (line === 'readyok') {\n                this.engineStatus.engineReady = true;\n            } else {\n                const match = line.match('^bestmove ([a-h][1-8])([a-h][1-8])([qrbn])?');\n                if (match) {\n                    this.bestMove = new Move(match[1], match[2], match[3] ? match[3] : null);\n                    this.isThinking = false;\n                }\n            }\n        }\n\n        this.stockfish.postMessage('uci');\n        this.stockfish.postMessage('isready');\n        // this.stockfish.postMessage('ucinewgame');\n    }\n\n    isEngineLoaded() {\n        return this.engineStatus.engineLoaded;\n    }\n\n    /**\n     * Update engine state to fenCode.\n     * @param {string} fenCode\n     */\n    setFEN(fenCode) {\n        if (!this.engineStatus.engineLoaded) {\n            throw new Error('Engine not loaded');\n        }\n\n        this.stockfish.postMessage(`position fen ${fenCode}`);\n    }\n\n    /**\n     * Update engine depth\n     * @param {number} depth\n     */\n    setDepth(depth) {\n        console.log(depth);\n        this.depth = _.clamp(depth, 1, 20);\n    }\n\n    /**\n     * Update engine skill level\n     * @param {number} skill\n     */\n    setSkillLevel(skillLevel) {\n        if (!this.engineStatus.engineLoaded) {\n            throw new Error('Engine not loaded');\n        }\n\n        skillLevel = _.clamp(skillLevel, 0, 20);\n        console.log(skillLevel);\n        this.stockfish.postMessage(`setoption name Skill Level value ${skillLevel}`);\n\n        // Stockfish level 20 does not make errors (intentially), so these numbers have no effect on level 20.\n        // Level 0 starts at 1\n        const err_prob = Math.round((skillLevel * 6.35) + 1);\n        // Level 0 starts at 10\n        const max_err = Math.round((skillLevel * -0.5) + 10);\n\n        this.stockfish.postMessage(`setoption name Skill Level Maximum Error value ${max_err}`);\n        this.stockfish.postMessage(`setoption name Skill Level Probability value ${err_prob}`);\n\n        this.skillLevel = skillLevel;\n    }\n\n    /**\n     * Start churning for best move.\n     * @param {ChessBoardState} chessBoardState\n     * @param {number} depth\n     */\n    searchBestMove(chessBoardState) {\n        this.bestMove = null;\n        this.isThinking = true;\n\n        this.setFEN(chessBoardState.toFEN());\n        this.stockfish.postMessage(`go depth ${this.depth}`);\n    }\n\n    /**\n     * Returns best move if one has been found.\n     */\n    getBestMove() {\n        return this.isThinking ? null : this.bestMove;\n    }\n}\n\nexport default Stockfish","import React from 'react';\n\nimport ChessBoardUI from '../ChessBoardUI/ChessBoardUI';\nimport ChessPieceUI from '../ChessPieceUI/ChessPieceUI';\nimport FENFormUI from '../FENFormUI/FENFormUI';\nimport ValidMovesUI from '../ValidMovesUI/ValidMovesUI';\nimport ChessBoardState from '../../objects/ChessBoardState';\nimport ChessPiece from '../../objects/ChessPiece';\nimport King from '../../objects/King';\nimport Stockfish from '../../objects/Stockfish';\nimport Color from '../../utils/color';\n\nclass ChessGameUI extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const chessBoardState = new ChessBoardState();\n        chessBoardState.reset();\n\n        const stockfish = new Stockfish();\n\n        this.state = {\n            chessBoardState: chessBoardState,\n            selectedPiece: null,\n            stockfish: stockfish,\n            stockfishSkillLevel: 0,\n            stockfishDepth: 1,\n        }\n\n        this.selectPiece = this.selectPiece.bind(this);\n        this.movePiece = this.movePiece.bind(this);\n        this.updateBoard = this.updateBoard.bind(this);\n    }\n\n    /**\n     * ComponentDidMount\n     */\n    componentDidMount() {\n        // NOTE: Uncomment to enable Stockfish computer for black\n        // // Set interval to check for engine best move results\n        // this.intID = setInterval(() => {\n        //     if (this.state.chessBoardState.currentPlayer === Color.WHITE) {\n        //         // Computer only moves for black\n        //         return;\n        //     }\n\n        //     if (this.state.stockfish.skillLevel !== this.state.stockfishSkillLevel) {\n        //         this.state.stockfish.setSkillLevel(this.state.stockfishSkillLevel)\n        //     }\n        //     if (this.state.stockfish.depth !== this.state.stockfishDepth) {\n        //         this.state.stockfish.setDepth(this.state.stockfishDepth);\n        //     }\n\n        //     const bestMove = this.state.stockfish.getBestMove();\n        //     if (!bestMove && !this.state.stockfish.isThinking) {\n        //         this.state.stockfish.searchBestMove(this.state.chessBoardState, this.state.stockfishDepth);\n        //     } else if (bestMove) {\n        //         this.state.chessBoardState.move(bestMove)\n        //         this.state.stockfish.bestMove = null;\n\n        //         this.setState(prev => ({\n        //             ...prev,\n        //             chessBoardState: ChessBoardState.fromFEN(this.state.chessBoardState.toFEN()),\n        //         }));\n        //     }\n        // }, 500);\n    }\n\n    /**\n     * Select chess piece for movement.\n     * @param {ChessPiece} piece\n     */\n    selectPiece(piece) {\n        if (piece === this.state.selectedPiece) {\n            // Deselect piece\n            this.setState(prev => ({\n                ...prev,\n                selectedPiece: null,\n            }));\n        } else {\n            // NOTE: Uncomment check to enable Stockfish computer for black\n            // if (this.state.chessBoardState.currentPlayer === Color.WHITE && piece.color === Color.WHITE) {\n            // Select piece if white (player) is moving\n            this.setState(prev => ({\n                ...prev,\n                selectedPiece: piece,\n            }));\n        }\n    }\n\n    /**\n     * Move selected piece if move is valid.\n     * @param {number} row\n     * @param {number} col\n     */\n    movePiece(row, col) {\n        if (!this.state.selectedPiece) {\n            console.log('No piece selected');\n            return;\n        }\n\n        const validMoves = this.state.selectedPiece.validMoves(\n            this.state.chessBoardState\n        )\n        const move = validMoves.filter(move => {\n            const [toR, toC] = move.toToRowCol();\n            return toR === row && toC === col\n        })[0];\n        if (move) {\n            this.state.chessBoardState.move(move);\n        } else {\n            console.log('Invalid move');\n        }\n\n        const newChessBoardState = ChessBoardState.fromFEN(this.state.chessBoardState.toFEN());\n\n        this.setState(prev => ({\n            ...prev,\n            chessBoardState: newChessBoardState,\n            selectedPiece: null,\n        }));\n    }\n\n    /**\n     * Update board to match FEN code.\n     * @param {string} fenCode\n     */\n    updateBoard(fenCode) {\n        const newChessBoardState = ChessBoardState.fromFEN(fenCode);\n        this.setState(prev => ({\n            ...prev,\n            chessBoardState: newChessBoardState,\n        }));\n    }\n\n    /**\n     * Render ChessGame.\n     */\n    render() {\n        const chessPieces = this.state.chessBoardState.getPieces();\n        return (\n            <div>\n                <ChessBoardUI movePiece={this.movePiece} />\n                {\n                    chessPieces.map(piece =>\n                        <ChessPieceUI\n                            key={`chess-piece${piece.id}`}\n                            piece={piece}\n                            isInCheck={\n                                piece instanceof King\n                                && this.state.chessBoardState.kingInCheck(piece.color)\n                            }\n                            selectPiece={() => this.selectPiece(piece)} />\n                    )\n                }\n                {\n                    this.state.selectedPiece\n                        ? <ValidMovesUI\n                            validMoves={\n                                this.state.selectedPiece.validMoves(\n                                    this.state.chessBoardState\n                                )\n                            }\n                            movePiece={this.movePiece} />\n                        : <div></div>\n                }\n                <FENFormUI\n                    fenCode={this.state.chessBoardState.toFEN()}\n                    updateBoard={this.updateBoard}\n                ></FENFormUI>\n            </div>\n        );\n    }\n}\n\nexport default ChessGameUI;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport ChessGame from './components/ChessGameUI/ChessGameUI';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChessGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}