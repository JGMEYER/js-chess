{"version":3,"sources":["components/ChessBoardUI/ChessBoardUI.js","utils/color.js","components/ChessPieceUI/ChessPieceUI.js","objects/Move.js","objects/ChessPiece.js","objects/Bishop.js","objects/Knight.js","objects/Queen.js","utils/board.js","objects/Pawn.js","objects/Rook.js","objects/King.js","objects/ChessBoardState.js","components/FENFormUI/FENFormUI.js","components/ValidMovesUI/ValidMovesUI.js","components/ChessGameUI/ChessGameUI.js","index.js"],"names":["ChessBoardUI","props","handleOnClick","bind","row","col","this","movePiece","className","Array","fill","map","square","idx","onClick","Math","floor","React","Component","Color","WHITE","BLACK","Object","freeze","ChessPieceUI","selectPiece","piece","color","isInCheck","style","top","left","icon","Move","coordsAStart","coordsAEnd","coordsBStart","coordsBEnd","chessBoardState","move","enPassantTarget","ChessPiece","printIcon","notation","constructor","Error","id","count","rowInc","colInc","checkIfKingInCheck","validMoves","pieceAtTarget","get","isEnemyOf","push","kingWouldBeInCheck","Bishop","upLeftMoves","_validMovesAlongLine","upRightMoves","downLeftMoves","downRightMoves","Knight","possibleMoves","filter","Queen","upMoves","rightMoves","downMoves","leftMoves","rowCol2FileRank","rowCol","RangeError","file","String","fromCharCode","rank","Pawn","hasMoved","topLeftPiece","topRightPiece","bottomLeftPiece","bottomRightPiece","forEach","execute","rowStart","board","abs","Rook","colStart","invalidateCastle","King","codeToMatch","castleAvailable","queenSideCastleAvailable","kingInCheck","kingSideCastleAvailable","canQueenSideCastle","canKingSideCastle","ChessBoardState","currentPlayer","availableCastles","halfMoveClock","fullMoveNumber","fileRank","length","toLowerCase","TypeError","Number","charCodeAt","fileRank2RowCol","aR1","aC1","aR2","aC2","pieceA","bR1","bC1","bR2","bC2","pieceB","castleCode","includes","replace","king","getPiecesFor","enemyPieces","i","pieces","cloneState","cloneDeep","chessPieces","type","ranks","ranksStr","emptySpaces","fen","join","rowStrings","rowString","console","log","split","rankStr","currentPlayerStr","availableCastlesStr","enPassantTargetStr","halfMoveClockStr","fullMoveNumberStr","indexOf","char","toUpperCase","match","isNaN","parseInt","FENFormUI","state","fenCode","handleChange","handleSubmit","e","setState","prev","target","value","errorStr","preventDefault","fromFEN","error","message","updateBoard","onSubmit","htmlFor","name","size","maxLength","onChange","ValidMovesUI","ChessGameUI","reset","selectedPiece","toFEN","getPieces","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e080691.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ChessBoardUI.css';\n\nclass ChessBoardUI extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    handleOnClick(row, col) {\n        this.props.movePiece(row, col)\n    }\n\n    render() {\n        return (\n            <div className=\"chess-board\">\n                {\n                    new Array(64).fill(null).map((square, idx) =>\n                        <div\n                            key={`square${idx}`}\n                            onClick={() => this.handleOnClick(\n                                Math.floor(idx / 8),\n                                idx % 8,\n                            )}>\n                        </div>\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nChessBoardUI.propTypes = {\n    movePiece: PropTypes.func.isRequired,\n}\n\nexport default ChessBoardUI;","const Color = {\n    WHITE: 0,\n    BLACK: 1,\n}\nObject.freeze(Color);\n\nexport default Color;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ChessPieceUI.css';\nimport Color from '../../utils/color';\n\n/**\n * A chess piece on the game board.\n */\nclass ChessPieceUI extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    handleOnClick() {\n        this.props.selectPiece();\n    }\n\n    /**\n     * Render ChessPiece.\n     */\n    render() {\n        let className = \"chess-piece\";\n        if (this.props.piece.color === Color.WHITE) {\n            className += \" white\";\n        }\n        if (this.props.isInCheck) {\n            className += \" in-check\";\n        }\n\n        return (\n            <div\n                className={className}\n                style={{\n                    top: `${this.props.piece.row * 50}px`,\n                    left: `${this.props.piece.col * 50}px`,\n                }}\n                onClick={this.handleOnClick} >\n                {this.props.piece.icon}\n            </div>\n        );\n    }\n}\n\nChessPieceUI.propTypes = {\n    piece: PropTypes.object.isRequired,\n    isInCheck: PropTypes.bool.isRequired,\n    selectPiece: PropTypes.func.isRequired,\n}\n\nexport default ChessPieceUI;","\nclass Move {\n    /**\n     * Construct Move\n     * @param {Array<number>} coordsAStart piece A start\n     * @param {Array<number>} coordsAEnd piece A end\n     * @param {Array<number>} coordsBStart piece B start (for castling)\n     * @param {Array<number>} coordsBEnd piece B end (for castling)\n     */\n    constructor(coordsAStart, coordsAEnd, coordsBStart = null, coordsBEnd = null) {\n        this.coordsAStart = coordsAStart;\n        this.coordsAEnd = coordsAEnd;\n        this.coordsBStart = coordsBStart;\n        this.coordsBEnd = coordsBEnd;\n    }\n\n    /**\n     * Execute move on ChessBoardState. Can be overridden.\n     * @param {ChessBoardState} chessBoardState\n     */\n    execute(chessBoardState) {\n        chessBoardState.move(this);\n        chessBoardState.enPassantTarget = '-';\n    }\n}\n\nexport default Move;","import ChessBoardState from './ChessBoardState';\nimport Color from '../utils/color';\nimport Move from './Move';\n\n/**\n * A chess piece on the game board.\n */\nclass ChessPiece {\n    static count = 0;\n\n    /**\n     * @constructor\n     * @param {string} icon\n     * @param {string} printIcon Icon for debug/print\n     * @param {string} notation\n     * @param {Color} color\n     * @param {number} row\n     * @param {number} col\n     */\n    constructor(icon, printIcon, notation, color, row, col) {\n        if (this.constructor == ChessPiece) {\n            throw new Error('Cannot instantiate abstract class ChessPiece');\n        }\n\n        this.id = ChessPiece.count;\n        this.icon = icon;\n        this.printIcon = printIcon;\n        this.notation = notation;\n        this.color = color;\n        this.row = row;\n        this.col = col;\n\n        ChessPiece.count++;\n    }\n\n    /**\n     * Move the ChessPiece to the designated (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    move(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n\n    /**\n     * Helper function for finding valid moves along a line, i.e orthogonally\n     * or on a diagonal.\n     * @param {ChessBoardState} chessBoardState\n     * @param {number} rowInc row increment\n     * @param {number} colInc col increment\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     */\n    _validMovesAlongLine(chessBoardState, rowInc, colInc, checkIfKingInCheck) {\n        const validMoves = [];\n\n        let pieceAtTarget = null;\n        let move = null;\n        let row = this.row + rowInc;\n        let col = this.col + colInc;\n\n        while (row >= 0 && row <= 7 && col >= 0 && col <= 7) {\n            pieceAtTarget = chessBoardState.get(row, col);\n            move = new Move([this.row, this.col], [row, col])\n            if (pieceAtTarget) {\n                if (pieceAtTarget.isEnemyOf(this.color)) {\n                    validMoves.push(move);\n                }\n                break;\n            } else if (checkIfKingInCheck\n                && chessBoardState.kingWouldBeInCheck(this.color, move)) {\n                // do nothing\n            } else {\n                validMoves.push(move);\n            }\n            row += rowInc;\n            col += colInc;\n        }\n\n        return validMoves;\n    }\n\n    /**\n     * Returns a set of valid moves for the ChessPiece.\n     * @param {ChessBoardState} chessBoardState\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck) {\n        throw new Error('Method validMoves() must be implemented.');\n    }\n\n    /**\n     * Returns whether piece belongs to opponent of this piece's color.\n     * @param {Color} color\n     */\n    isEnemyOf(color) {\n        return color !== this.color;\n    }\n}\n\nexport default ChessPiece;\n","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Color from '../utils/color';\n\nclass Bishop extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♝';\n        const printIcon = color === Color.WHITE ? '♗' : '♝';\n        const notation = color === Color.WHITE ? 'B' : 'b';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Bishop.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const upLeftMoves = this._validMovesAlongLine(chessBoardState, -1, -1, checkIfKingInCheck);\n        const upRightMoves = this._validMovesAlongLine(chessBoardState, -1, 1, checkIfKingInCheck);\n        const downLeftMoves = this._validMovesAlongLine(chessBoardState, 1, -1, checkIfKingInCheck)\n        const downRightMoves = this._validMovesAlongLine(chessBoardState, 1, 1, checkIfKingInCheck)\n        return [...upLeftMoves, ...upRightMoves, ...downLeftMoves, ...downRightMoves];\n    }\n}\n\nexport default Bishop;","import ChessBoardState from \"./ChessBoardState\";\nimport ChessPiece from \"./ChessPiece\";\nimport Move from \"./Move\";\nimport Color from \"../utils/color\";\n\nclass Knight extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♞';\n        const printIcon = color === Color.WHITE ? '♘' : '♞';\n        const notation = color === Color.WHITE ? 'N' : 'n';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Bishop.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const possibleMoves = [\n            new Move([this.row, this.col], [this.row - 2, this.col - 1]),\n            new Move([this.row, this.col], [this.row - 2, this.col + 1]),\n            new Move([this.row, this.col], [this.row - 1, this.col + 2]),\n            new Move([this.row, this.col], [this.row + 1, this.col + 2]),\n            new Move([this.row, this.col], [this.row + 2, this.col + 1]),\n            new Move([this.row, this.col], [this.row + 2, this.col - 1]),\n            new Move([this.row, this.col], [this.row + 1, this.col - 2]),\n            new Move([this.row, this.col], [this.row - 1, this.col - 2]),\n        ];\n\n        let pieceAtTarget = null;\n        const validMoves = possibleMoves.filter(move => {\n            const [row, col] = move.coordsAEnd;\n            if (row < 0 || row > 7 || col < 0 || col > 7) {\n                return false;\n            }\n\n            pieceAtTarget = chessBoardState.get(row, col)\n            if (!pieceAtTarget) {\n                return true;\n            }\n            else if (pieceAtTarget && pieceAtTarget.isEnemyOf(this.color)) {\n                return true;\n            }\n            return false;\n        });\n\n        if (checkIfKingInCheck) {\n            return validMoves.filter(move =>\n                !chessBoardState.kingWouldBeInCheck(this.color, move)\n            );\n        }\n\n        return validMoves;\n    }\n}\n\nexport default Knight;","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Color from '../utils/color';\n\nclass Queen extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♛';\n        const printIcon = color === Color.WHITE ? '♕' : '♛';\n        const notation = color === Color.WHITE ? 'Q' : 'q';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Queen.\n     * @param {ChessBoardState} chessBoardState\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const upLeftMoves = this._validMovesAlongLine(chessBoardState, -1, -1, checkIfKingInCheck);\n        const upRightMoves = this._validMovesAlongLine(chessBoardState, -1, 1, checkIfKingInCheck);\n        const downLeftMoves = this._validMovesAlongLine(chessBoardState, 1, -1, checkIfKingInCheck)\n        const downRightMoves = this._validMovesAlongLine(chessBoardState, 1, 1, checkIfKingInCheck)\n        const upMoves = this._validMovesAlongLine(chessBoardState, -1, 0, checkIfKingInCheck);\n        const rightMoves = this._validMovesAlongLine(chessBoardState, 0, 1, checkIfKingInCheck);\n        const downMoves = this._validMovesAlongLine(chessBoardState, 1, 0, checkIfKingInCheck)\n        const leftMoves = this._validMovesAlongLine(chessBoardState, 0, -1, checkIfKingInCheck)\n        return [\n            ...upMoves, ...rightMoves, ...downMoves, ...leftMoves,\n            ...upLeftMoves, ...upRightMoves, ...downLeftMoves, ...downRightMoves\n        ];\n    }\n}\n\nexport default Queen;","/**\n * Convert (row, col) pair to fileRank.\n * @param {Array<number>} rowCol\n */\nexport function rowCol2FileRank(rowCol) {\n    const [row, col] = rowCol;\n    if (!typeof row === 'number') {\n        throw TypeError('Row must be a number');\n    }\n    if (!typeof col === 'number') {\n        throw TypeError('Column must be a number');\n    }\n    if (row < 0 || row > 7) {\n        throw RangeError('Row out of bounds');\n    }\n    if (col < 0 || col > 7) {\n        throw RangeError('Column out of bounds');\n    }\n\n    const file = String.fromCharCode(col + 97);\n    const rank = 8 - row;\n    return `${file}${rank}`;\n}\n\n/**\n * Convert fileRank to (row, col).\n * @param {string} fileRank\n */\nexport function fileRank2RowCol(fileRank) {\n    if (!typeof fileRank === 'string' || fileRank.length !== 2 || fileRank.toLowerCase() !== fileRank) {\n        throw TypeError('FileRank must be 2-character lowercase string');\n    }\n\n    const file = fileRank[0];\n    const rank = Number(fileRank[1]);\n    if (file < 'a' || file > 'h') {\n        throw RangeError('File out of bounds');\n    }\n    if (rank < 1 || rank > 8) {\n        throw RangeError('Rank out of bounds');\n    }\n\n    const row = 8 - rank;\n    const col = file.charCodeAt(0) - 97;\n    return [row, col];\n}\n","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Move from './Move';\nimport Queen from './Queen';\nimport { rowCol2FileRank } from '../utils/board';\nimport Color from '../utils/color';\n\nclass Pawn extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♟';\n        const printIcon = color === Color.WHITE ? '♙' : '♟';\n        const notation = color === Color.WHITE ? 'P' : 'p';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Returns whether the pawn has already moved.\n     */\n    hasMoved() {\n        return (this.color === Color.WHITE && this.row !== 6)\n            || (this.color === Color.BLACK && this.row !== 1);\n    }\n\n    /**\n     * Returns an array of valid moves for the Pawn.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const validMoves = [];\n\n        // Movement (1 space)\n        if (this.color === Color.WHITE) {\n            if (this.row > 0 && chessBoardState.get(this.row - 1, this.col) === null) {\n                validMoves.push(new Move([this.row, this.col], [this.row - 1, this.col]));\n            }\n        }\n        else if (this.color === Color.BLACK) {\n            if (this.row < 7 && chessBoardState.get(this.row + 1, this.col) === null) {\n                validMoves.push(new Move([this.row, this.col], [this.row + 1, this.col]));\n            }\n        }\n\n        // Movement (2 spaces)\n        if (!this.hasMoved()) {\n            if (this.color === Color.WHITE) {\n                if (this.row > 1\n                    && chessBoardState.get(this.row - 1, this.col) === null\n                    && chessBoardState.get(this.row - 2, this.col) === null) {\n                    validMoves.push(new Move([this.row, this.col], [this.row - 2, this.col]));\n                }\n            } else if (this.color === Color.BLACK) {\n                if (this.row < 6\n                    && chessBoardState.get(this.row + 1, this.col) === null\n                    && chessBoardState.get(this.row + 2, this.col) === null) {\n                    validMoves.push(new Move([this.row, this.col], [this.row + 2, this.col]));\n                }\n            }\n        }\n\n        const leftPiece = chessBoardState.get(this.row, this.col - 1);\n        const rightPiece = chessBoardState.get(this.row, this.col + 1);\n\n        // Take\n        if (this.color === Color.WHITE) {\n            // Top left\n            if (this.row > 0 && this.col > 0) {\n                const topLeftPiece = chessBoardState.get(this.row - 1, this.col - 1);\n                if (topLeftPiece && topLeftPiece.isEnemyOf(this.color)) {\n                    validMoves.push(new Move([this.row, this.col], [this.row - 1, this.col - 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row - 1, this.col - 1])) {\n                    // En passant\n                    validMoves.push(new Move([this.row, this.col], [this.row - 1, this.col - 1]));\n                }\n            }\n            // Top right\n            if (this.row > 0 && this.col < 7) {\n                const topRightPiece = chessBoardState.get(this.row - 1, this.col + 1);\n                if (topRightPiece && topRightPiece.isEnemyOf(this.color)) {\n                    validMoves.push(new Move([this.row, this.col], [this.row - 1, this.col + 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row - 1, this.col + 1])) {\n                    // En passant\n                    validMoves.push(new Move([this.row, this.col], [this.row - 1, this.col + 1]));\n                }\n            }\n        } else if (this.color === Color.BLACK) {\n            // Bottom left\n            if (this.row < 7 && this.col > 0) {\n                const bottomLeftPiece = chessBoardState.get(this.row + 1, this.col - 1);\n                if (bottomLeftPiece && bottomLeftPiece.isEnemyOf(this.color)) {\n                    validMoves.push(new Move([this.row, this.col], [this.row + 1, this.col - 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row + 1, this.col - 1])) {\n                    // En passant\n                    validMoves.push(new Move([this.row, this.col], [this.row + 1, this.col - 1]));\n                }\n            }\n            // Bottom right\n            if (this.row < 7 && this.col < 7) {\n                const bottomRightPiece = chessBoardState.get(this.row + 1, this.col + 1);\n                if (bottomRightPiece && bottomRightPiece.isEnemyOf(this.color)) {\n                    validMoves.push(new Move([this.row, this.col], [this.row + 1, this.col + 1]));\n                } else if (chessBoardState.enPassantTarget === rowCol2FileRank([this.row + 1, this.col + 1])) {\n                    // En passant\n                    validMoves.push(new Move([this.row, this.col], [this.row + 1, this.col + 1]));\n                }\n            }\n        }\n\n        validMoves.forEach(move => {\n            move.execute = (chessBoardState) => {\n                const [rowStart, colStart] = move.coordsAStart;\n                const [row, col] = move.coordsAEnd;\n\n                // En passant\n                if (chessBoardState.enPassantTarget === rowCol2FileRank([row, col])) {\n                    if (this.color === Color.WHITE) {\n                        chessBoardState.board[row + 1][col] = null;\n                    } else if (this.color === Color.BLACK) {\n                        chessBoardState.board[row - 1][col] = null;\n                    }\n                }\n\n                chessBoardState.move(move);\n\n                if (Math.abs(rowStart - row) === 2) {\n                    // Moved 2 spaces, mark for en passant\n                    if (this.color === Color.WHITE) {\n                        chessBoardState.enPassantTarget = rowCol2FileRank([row + 1, col]);\n                    } else if (this.color === Color.BLACK) {\n                        chessBoardState.enPassantTarget = rowCol2FileRank([row - 1, col]);\n                    }\n                } else {\n                    // Reset enPassantTarget\n                    chessBoardState.enPassantTarget = '-';\n                }\n\n                // Queen promotion\n                if (row === 0 || row === 7) {\n                    chessBoardState.board[row][col] = new Queen(this.color, row, col);\n                }\n            }\n        });\n\n        if (checkIfKingInCheck) {\n            return validMoves.filter(move =>\n                !chessBoardState.kingWouldBeInCheck(this.color, move)\n            );\n        }\n\n        return validMoves;\n    }\n}\n\nexport default Pawn;","import ChessBoardState from \"./ChessBoardState\";\nimport ChessPiece from './ChessPiece';\nimport Color from '../utils/color';\n\nclass Rook extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♜';\n        const printIcon = color === Color.WHITE ? '♖' : '♜';\n        const notation = color === Color.WHITE ? 'R' : 'r';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Move the Rook to the designated (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    move(row, col) {\n        super.move(row, col);\n    }\n\n    /**\n     * Returns an array of valid moves for the Rook.\n     * @param {ChessBoardState} chessBoardState\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const upMoves = this._validMovesAlongLine(chessBoardState, -1, 0, checkIfKingInCheck);\n        const downMoves = this._validMovesAlongLine(chessBoardState, 1, 0, checkIfKingInCheck)\n        const rightMoves = this._validMovesAlongLine(chessBoardState, 0, 1, checkIfKingInCheck);\n        const leftMoves = this._validMovesAlongLine(chessBoardState, 0, -1, checkIfKingInCheck)\n        const validMoves = [...upMoves, ...rightMoves, ...downMoves, ...leftMoves];\n\n        validMoves.forEach(move => {\n            move.execute = (chessBoardState) => {\n                const [rowStart, colStart] = move.coordsAStart;\n\n                if (rowStart === 7 && colStart === 7) {\n                    chessBoardState.invalidateCastle('K');\n                }\n                else if (rowStart === 7 && colStart === 0) {\n                    chessBoardState.invalidateCastle('Q');\n                }\n                else if (rowStart === 0 && colStart === 7) {\n                    chessBoardState.invalidateCastle('k')\n                }\n                else if (rowStart === 0 && colStart === 0) {\n                    chessBoardState.invalidateCastle('q')\n                }\n\n                chessBoardState.move(move);\n                chessBoardState.enPassantTarget = '-';\n            }\n        });\n\n        return validMoves;\n    }\n}\n\nexport default Rook;","import ChessBoardState from './ChessBoardState';\nimport ChessPiece from './ChessPiece';\nimport Move from './Move';\nimport Rook from './ChessPiece';\nimport Color from '../utils/color';\n\nclass King extends ChessPiece {\n    constructor(color, row, col) {\n        const icon = '♚';\n        const printIcon = color === Color.WHITE ? '♔' : '♚';\n        const notation = color === Color.WHITE ? 'K' : 'k';\n        super(icon, printIcon, notation, color, row, col);\n    }\n\n    /**\n     * Move the King to the designated (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    move(row, col) {\n        super.move(row, col);\n    }\n\n    /**\n     * Returns whether queenside castle still available.\n     * @param {ChessBoardState} chessBoardState\n     */\n    queenSideCastleAvailable(chessBoardState) {\n        const codeToMatch = this.color === Color.WHITE ? 'Q' : 'q';\n        return chessBoardState.castleAvailable(codeToMatch);\n    }\n\n    /**\n     * Returns whether king can queenside castle\n     * @param {ChessBoardState} chessBoardState\n     */\n    canQueenSideCastle(chessBoardState) {\n        // 1. The castling must be queenside\n        let row = this.color === Color.WHITE ? 7 : 0;\n        // 2. Neither the king nor the chosen rook has previously moved\n        if (!this.queenSideCastleAvailable(chessBoardState)) {\n            return false;\n        }\n        // 3. There are no pieces between the king and the chosen rook\n        if (\n            chessBoardState.get(row, 1) !== null\n            || chessBoardState.get(row, 2) !== null\n            || chessBoardState.get(row, 3) !== null\n        ) {\n            return false;\n        }\n        // 4. The king is not currently in check\n        if (chessBoardState.kingInCheck(this.color)) {\n            return false;\n        }\n        // 5/6. The king would not pass through check or end up in check\n        if (chessBoardState.kingWouldBeInCheck(this.color, new Move([row, 4], [row, 3]))\n            || chessBoardState.kingWouldBeInCheck(this.color, new Move([row, 4], [row, 2]))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns whether kingside castle still available.\n     * @param {ChessBoardState} chessBoardState\n     */\n    kingSideCastleAvailable(chessBoardState) {\n        const codeToMatch = this.color === Color.WHITE ? 'K' : 'k';\n        return chessBoardState.castleAvailable(codeToMatch);\n    }\n\n    /**\n     * Returns whether king can kingside castle\n     * @param {ChessBoardState} chessBoardState\n     */\n    canKingSideCastle(chessBoardState) {\n        // 1. The castling must be queenside\n        let row = this.color === Color.WHITE ? 7 : 0;\n        const rightMostPiece = chessBoardState.get(row, 7);\n        // 2. Neither the king nor the chosen rook has previously moved\n        if (!this.kingSideCastleAvailable(chessBoardState)) {\n            return false;\n        }\n        // 3. There are no pieces between the king and the chosen rook\n        if (\n            chessBoardState.get(row, 5) !== null\n            || chessBoardState.get(row, 6) !== null\n        ) {\n            return false;\n        }\n        // 4. The king is not currently in check\n        if (chessBoardState.kingInCheck(this.color)) {\n            return false;\n        }\n        // 5/6. The king would not pass through check or end up in check\n        if (chessBoardState.kingWouldBeInCheck(this.color, new Move([row, 4], [row, 5]))\n            || chessBoardState.kingWouldBeInCheck(this.color, new Move([row, 4], [row, 6]))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns an array of valid moves for the King.\n     * @param {ChessBoardState} chessBoardState\n     * @param {boolean} checkIfKingInCheck helps prevent recursion\n     * @returns {Array<Array<number>>} array of valid move coordinates.\n     */\n    validMoves(chessBoardState, checkIfKingInCheck = true) {\n        const possibleMoves = [\n            new Move([this.row, this.col], [this.row - 1, this.col]),\n            new Move([this.row, this.col], [this.row - 1, this.col + 1]),\n            new Move([this.row, this.col], [this.row, this.col + 1]),\n            new Move([this.row, this.col], [this.row + 1, this.col + 1]),\n            new Move([this.row, this.col], [this.row + 1, this.col]),\n            new Move([this.row, this.col], [this.row + 1, this.col - 1]),\n            new Move([this.row, this.col], [this.row, this.col - 1]),\n            new Move([this.row, this.col], [this.row - 1, this.col - 1]),\n        ];\n\n        let pieceAtTarget = null;\n        const validMoves = possibleMoves.filter(move => {\n            const [row, col] = move.coordsAEnd;\n            if (row < 0 || row > 7 || col < 0 || col > 7) {\n                return false;\n            }\n\n            pieceAtTarget = chessBoardState.get(row, col)\n            if (!pieceAtTarget) {\n                return true;\n            }\n            else if (pieceAtTarget && pieceAtTarget.isEnemyOf(this.color)) {\n                return true;\n            }\n            return false;\n        });\n\n        if (checkIfKingInCheck) {\n            if (this.canQueenSideCastle(chessBoardState)) {\n                let row = this.color === Color.WHITE ? 7 : 0;\n                validMoves.push(new Move(\n                    [row, 4], [row, 2], // king\n                    [row, 0], [row, 3], // left rook\n                ));\n            }\n\n            if (this.canKingSideCastle(chessBoardState)) {\n                let row = this.color === Color.WHITE ? 7 : 0;\n                validMoves.push(new Move(\n                    [row, 4], [row, 6], // king\n                    [row, 7], [row, 5], // right rook\n                ));\n            }\n        }\n\n        validMoves.forEach(move => {\n            move.execute = (chessBoardState) => {\n                if (this.color === Color.WHITE) {\n                    chessBoardState.invalidateCastle('KQ');\n                } else if (this.color === Color.BLACK) {\n                    chessBoardState.invalidateCastle('kq');\n                }\n\n                chessBoardState.move(move);\n                chessBoardState.enPassantTarget = '-';\n            }\n        });\n\n        if (checkIfKingInCheck) {\n            return validMoves.filter(move =>\n                !chessBoardState.kingWouldBeInCheck(this.color, move)\n            );\n        }\n\n        return validMoves;\n    }\n}\n\nexport default King;","import { cloneDeep } from 'lodash';\n\nimport Bishop from './Bishop';\nimport Knight from './Knight';\nimport Pawn from './Pawn';\nimport Rook from './Rook';\nimport Queen from './Queen';\nimport King from './King';\nimport ChessPiece from './ChessPiece';\nimport Move from './Move';\nimport { fileRank2RowCol } from '../utils/board';\nimport Color from '../utils/color';\n\n/**\n * Handles the state of the chess board and its pieces.\n */\nclass ChessBoardState {\n    constructor() {\n        this.board = [\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n        ]\n        this.currentPlayer = Color.WHITE;\n        this.availableCastles = '-';\n        this.enPassantTarget = '-';\n        this.halfMoveClock = 0;\n        this.fullMoveNumber = 1;\n    }\n\n    /**\n     * Returns the piece at (row, col).\n     * @param {number} row\n     * @param {number} col\n     */\n    get(row, col) {\n        return this.board[row][col];\n    }\n\n    /**\n     * Returns the piece at (file, rank).\n     * @param {string} fileRank\n     */\n    getFileRank(fileRank) {\n        const [row, col] = fileRank2RowCol(fileRank);\n        return this.board[row][col];\n    }\n\n    /**\n     * Reset the game board.\n     */\n    reset() {\n        this.board = [\n            [new Rook(Color.BLACK, 0, 0), new Knight(Color.BLACK, 0, 1), new Bishop(Color.BLACK, 0, 2), new Queen(Color.BLACK, 0, 3), new King(Color.BLACK, 0, 4), new Bishop(Color.BLACK, 0, 5), new Knight(Color.BLACK, 0, 6), new Rook(Color.BLACK, 0, 7)],\n            [new Pawn(Color.BLACK, 1, 0), new Pawn(Color.BLACK, 1, 1), new Pawn(Color.BLACK, 1, 2), new Pawn(Color.BLACK, 1, 3), new Pawn(Color.BLACK, 1, 4), new Pawn(Color.BLACK, 1, 5), new Pawn(Color.BLACK, 1, 6), new Pawn(Color.BLACK, 1, 7)],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [new Pawn(Color.WHITE, 6, 0), new Pawn(Color.WHITE, 6, 1), new Pawn(Color.WHITE, 6, 2), new Pawn(Color.WHITE, 6, 3), new Pawn(Color.WHITE, 6, 4), new Pawn(Color.WHITE, 6, 5), new Pawn(Color.WHITE, 6, 6), new Pawn(Color.WHITE, 6, 7)],\n            [new Rook(Color.WHITE, 7, 0), new Knight(Color.WHITE, 7, 1), new Bishop(Color.WHITE, 7, 2), new Queen(Color.WHITE, 7, 3), new King(Color.WHITE, 7, 4), new Bishop(Color.WHITE, 7, 5), new Knight(Color.WHITE, 7, 6), new Rook(Color.WHITE, 7, 7)],\n        ]\n        this.currentPlayer = Color.WHITE;\n        this.availableCastles = 'KQkq';\n        this.enPassantTarget = '-';\n        this.halfMoveClock = 0;\n        this.fullMoveNumber = 1;\n    }\n\n    /**\n     * Executes move\n     * @param {Move} move\n     */\n    move(move) {\n        const [aR1, aC1] = move.coordsAStart;\n        const [aR2, aC2] = move.coordsAEnd;\n        const pieceA = this.board[aR1][aC1];\n        this.board[aR2][aC2] = pieceA;\n        this.board[aR1][aC1] = null;\n        pieceA.move(aR2, aC2);\n\n        if (pieceA instanceof Pawn || pieceA instanceof King) {\n            this.halfMoveClock = 0;\n        } else {\n            this.halfMoveClock++;\n        }\n\n        if (move.coordsBStart !== null && move.coordsBEnd !== null) {\n            const [bR1, bC1] = move.coordsBStart;\n            const [bR2, bC2] = move.coordsBEnd;\n            const pieceB = this.board[bR1][bC1];\n            this.board[bR2][bC2] = pieceB;\n            this.board[bR1][bC1] = null;\n            pieceB.move(bR2, bC2);\n        }\n\n        this.currentPlayer = this.currentPlayer === Color.WHITE\n            ? Color.BLACK\n            : Color.WHITE;\n        if (this.currentPlayer === Color.WHITE) {\n            this.fullMoveNumber++;\n        }\n    }\n\n    /**\n     * Remove piece from board.\n     * @param {number} row\n     * @param {number} col\n     */\n    removePiece(row, col) {\n        this.board[row][col] = null;\n    }\n\n    /**\n     * Check if castle opportunity available\n     * e.g. 'KQkq' -> invalidateCastle('Q') -> returns true\n     * e.g. 'Kkq' -> invalidateCastle('KQ') -> returns false\n     * @param {string} castleCode\n     */\n    castleAvailable(castleCode) {\n        return this.availableCastles.includes(castleCode);\n    }\n\n    /**\n     * Invalidate castle opportunity\n     * e.g. 'KQkq' -> invalidateCastle('Q') -> 'Kkq'\n     * e.g. 'KQkq' -> invalidateCastle('kq') -> 'KQ'\n     * @param {string} castleCode\n     */\n    invalidateCastle(castleCode) {\n        this.availableCastles = this.availableCastles.replace(castleCode, '');\n\n        if (this.availableCastles === '') {\n            this.availableCastles = '-';\n        }\n    }\n\n    /**\n     * Returns whether king of given color is currently in check.\n     * @param {Color} color\n     * @returns {boolean} King currently in check\n     */\n    kingInCheck(color) {\n        const king = this.getPiecesFor(color).filter(\n            piece => piece instanceof King\n        )[0];\n        const enemyPieces = this.getPiecesFor(\n            color === Color.WHITE ? Color.BLACK : Color.WHITE\n        );\n\n        for (let i = 0; i < enemyPieces.length; i++) {\n            const enemyPiece = enemyPieces[i];\n            const validMoves = enemyPiece.validMoves(this, false);\n            const validMovesOnKing = validMoves.filter(\n                move => move.coordsAEnd[0] === king.row && move.coordsAEnd[1] === king.col\n            )\n            if (validMovesOnKing.length > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether king of given color is currently in checkmate.\n     * @param {Color} color\n     * @returns {boolean} King in checkmate\n     */\n    kingInCheckmate(color) {\n        if (!this.kingInCheck(color)) {\n            return false;\n        }\n\n        const pieces = this.getPiecesFor(color);\n        const validMoves = [];\n        pieces.forEach(piece => {\n            validMoves.push(...piece.validMoves(this));\n        });\n\n        return validMoves.length === 0;\n    }\n\n    /**\n     * Returns whether king of given color would be in check after the given\n     * move.\n     * @param {Color} color\n     * @param {number} r1 row1\n     * @param {number} c1 col1\n     * @param {number} r2 row2\n     * @param {number} c2 col2\n     * @returns {boolean} King would be in check\n     */\n    kingWouldBeInCheck(color, move) {\n        const cloneState = cloneDeep(this);\n        move.execute(cloneState);\n        return cloneState.kingInCheck(color);\n    }\n\n    /**\n     * Returns an array of all pieces on the board.\n     * @returns {Array<ChessPiece>}\n     */\n    getPieces() {\n        const chessPieces = [];\n        this.board.forEach(row => {\n            row.forEach(piece => {\n                if (piece !== null) {\n                    chessPieces.push(piece);\n                }\n            });\n        });\n        return chessPieces;\n    }\n\n    /**\n     * Returns an array of all pieces on the board for the given color.\n     * @param {Color} color\n     * @param {ChessPiece} type Type of piece to filter on\n     * @returns {Array<ChessPiece>}\n     */\n    getPiecesFor(color, type = null) {\n        const chessPieces = [];\n        this.board.forEach(row => {\n            row.forEach(piece => {\n                if ((piece !== null && piece.color === color)) {\n                    if (type === null || piece instanceof type) {\n                        chessPieces.push(piece);\n                    }\n                }\n            });\n        });\n        return chessPieces;\n    }\n\n    /**\n     * Generates board state from Forsyth-Edwards Notation.\n     * @param {string} fen\n     */\n    static fromFEN(fen) {\n        const split = fen.split(' ');\n\n        if (split.length !== 6) {\n            throw new Error('FEN string must have 6 components: [ranks activePlayer availableCastles enPassantTarget halfMoveClock fullMoveNumber]');\n        }\n\n        const rankStr = split[0];\n        const currentPlayerStr = split[1];\n        const availableCastlesStr = split[2];\n        const enPassantTargetStr = split[3];\n        const halfMoveClockStr = split[4];\n        const fullMoveNumberStr = split[5];\n\n        if (rankStr.indexOf('K') === -1 || rankStr.indexOf('k') === -1) {\n            throw new Error('Both white and black king must be present');\n        }\n\n        const chessBoardState = new ChessBoardState();\n\n        // 1. Ranks\n        let ranks = rankStr.split('/');\n        if (ranks.length !== 8) {\n            throw new RangeError('FEN must contain 8 ranks');\n        }\n        for (let rank = 0; rank < 8; rank++) {\n            let file = 0;\n            for (let i = 0; i < ranks[rank].length; i++) {\n                const char = ranks[rank][i];\n\n                if ((char >= '1' && char <= '8')\n                    || (['P', 'N', 'B', 'R', 'Q', 'K'].includes(char.toUpperCase()))) {\n                    // ok\n                } else {\n                    throw new Error('Invalid rank notation char');\n                }\n\n                // Empty spaces, ignore\n                if (char >= '1' && char <= '8') {\n                    file += Number(char);\n                    continue;\n                }\n\n                const color = char === char.toUpperCase()\n                    ? Color.WHITE\n                    : Color.BLACK;\n                let piece;\n                switch (char.toLowerCase()) {\n                    case 'p':\n                        piece = new Pawn(color, rank, file);\n                        break;\n                    case 'n':\n                        piece = new Knight(color, rank, file);\n                        break;\n                    case 'b':\n                        piece = new Bishop(color, rank, file);\n                        break;\n                    case 'r':\n                        piece = new Rook(color, rank, file);\n                        break;\n                    case 'q':\n                        piece = new Queen(color, rank, file);\n                        break;\n                    case 'k':\n                        piece = new King(color, rank, file);\n                        break;\n                    default:\n                        throw new Error('Invalid piece notation');\n                }\n\n                chessBoardState.board[rank][file] = piece;\n                file++;\n            }\n\n            if (file < 7 || file > 8) {\n                // Not the best check, could end up with idx 7 or 8, depending on logic\n                throw new Error('File must contain 8 pieces');\n            }\n        }\n\n        // 2. Active Player\n        switch (currentPlayerStr) {\n            case 'w':\n                chessBoardState.currentPlayer = Color.WHITE;\n                break;\n            case 'b':\n                chessBoardState.currentPlayer = Color.BLACK;\n                break;\n            default:\n                throw new Error('Invalid active color notation')\n        }\n\n        // 3. Available Castles\n        if (!availableCastlesStr.match('(\\-|K?Q?k?q?)')) {\n            throw new Error('Malformed available castles')\n        }\n        chessBoardState.availableCastles = availableCastlesStr;\n\n        // 4. En Passant Target\n        if (\n            (enPassantTargetStr.length === 1 && enPassantTargetStr === '-')\n            || (\n                enPassantTargetStr.length === 2\n                && (enPassantTargetStr[0] >= 'a' && enPassantTargetStr[0] <= 'h')\n                && (enPassantTargetStr[1] >= 1 && enPassantTargetStr[1] <= 8)\n            )\n        ) {\n            // ok\n        } else {\n            throw new Error('Malformed en passant target');\n        }\n        chessBoardState.enPassantTarget = enPassantTargetStr;\n\n        // 5. Half Move Clock\n        if (isNaN(halfMoveClockStr)\n            || parseInt(halfMoveClockStr) != halfMoveClockStr\n            || parseInt(halfMoveClockStr) < 0) {\n            throw new Error('Half Move Clock must be an integer >= 0')\n        }\n        chessBoardState.halfMoveClock = Number(halfMoveClockStr);\n\n        // 6. Full Move Number\n        if (isNaN(fullMoveNumberStr)\n            || parseInt(fullMoveNumberStr) != fullMoveNumberStr\n            || parseInt(fullMoveNumberStr) < 1) {\n            throw new Error('Full Move Number must be a positive integer')\n        }\n        chessBoardState.fullMoveNumber = Number(fullMoveNumberStr);\n\n        return chessBoardState;\n    }\n\n    /**\n     * Returns Forsyth–Edwards Notation for board state.\n     */\n    toFEN() {\n        let ranks = [];\n        this.board.forEach(rank => {\n            let ranksStr = '';\n            let emptySpaces = 0;\n            rank.forEach(piece => {\n                if (piece === null) {\n                    emptySpaces++;\n                } else {\n                    if (emptySpaces) {\n                        ranksStr += emptySpaces;\n                        emptySpaces = 0;\n                    }\n                    ranksStr += piece.notation;\n                }\n            });\n            if (emptySpaces) {\n                ranksStr += emptySpaces;\n            }\n            ranks.push(ranksStr);\n        });\n\n        let fen = ranks.join('/');\n\n        fen += this.currentPlayer === Color.WHITE ? ' w' : ' b';\n\n        fen += ` ${this.availableCastles}`;\n        fen += ` ${this.enPassantTarget}`;\n        fen += ` ${this.halfMoveClock}`;\n        fen += ` ${this.fullMoveNumber}`;\n\n        return fen;\n    }\n\n    /**\n     * Pretty print the board state to the console.\n     */\n    print() {\n        let rowStrings = [];\n        this.board.forEach(row => {\n            let rowString = '';\n            row.forEach(piece => {\n                rowString += piece === null ? '.' : piece.printIcon;\n            })\n            rowStrings.push(rowString);\n        })\n        console.log(rowStrings.join('\\n'));\n    }\n}\n\nexport default ChessBoardState;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './FENFormUI.css';\nimport ChessBoardState from '../../objects/ChessBoardState';\n\nclass FENFormUI extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { fenCode: this.props.fenCode };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState(prev => ({\n            ...prev,\n            fenCode: e.target.value,\n            errorStr: '',\n        }));\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        try {\n            ChessBoardState.fromFEN(this.state.fenCode);\n        } catch (error) {\n            this.setState(prev => ({\n                ...prev,\n                errorStr: error.message,\n            }));\n            return;\n        }\n        this.props.updateBoard(this.state.fenCode);\n    }\n\n    render() {\n        return (\n            <div>\n                <form className=\"fen-form\" onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"fen-input\">FEN</label>\n                    <input\n                        className=\"fen-input\"\n                        name=\"fen-input\"\n                        type=\"text\"\n                        size=\"87\"\n                        maxLength=\"87\"\n                        value={this.state.fenCode}\n                        onChange={this.handleChange}\n                    >\n                    </input>\n                </form>\n                <p className=\"fen-form-error\">{this.state.errorStr}</p>\n            </div>\n        )\n    }\n}\n\nFENFormUI.propTypes = {\n    fenCode: PropTypes.string.isRequired,\n    updateBoard: PropTypes.func.isRequired,\n}\n\nexport default FENFormUI;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ValidMovesUI.css';\nimport Move from '../../objects/Move';\n\nclass ValidMovesUI extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    handleOnClick(row, col) {\n        this.props.movePiece(row, col);\n    }\n\n    /**\n     * Render ValidMovesUI.\n     */\n    render() {\n        return (\n            <div>\n                {\n                    this.props.validMoves.map((move, idx) => {\n                        const [row, col] = move.coordsAEnd;\n                        return (\n                            <div\n                                key={`valid-move${idx}`}\n                                className=\"valid-move\"\n                                style={{\n                                    top: `${row * 50}px`,\n                                    left: `${col * 50}px`,\n                                }}\n                                onClick={() => this.handleOnClick(row, col)}>\n                                •\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nValidMovesUI.propTypes = {\n    validMoves: PropTypes.arrayOf(\n        PropTypes.shape({\n            coordsAStart: PropTypes.arrayOf(PropTypes.number),\n            coordsAEnd: PropTypes.arrayOf(PropTypes.number),\n            coordsBStart: PropTypes.arrayOf(PropTypes.number),\n            coordsBEnd: PropTypes.arrayOf(PropTypes.number),\n        })\n    ).isRequired,\n    movePiece: PropTypes.func.isRequired,\n}\n\nexport default ValidMovesUI;","import React from 'react';\n\nimport ChessBoardUI from '../ChessBoardUI/ChessBoardUI';\nimport ChessPieceUI from '../ChessPieceUI/ChessPieceUI';\nimport FENFormUI from '../FENFormUI/FENFormUI';\nimport ValidMovesUI from '../ValidMovesUI/ValidMovesUI';\nimport ChessBoardState from '../../objects/ChessBoardState';\nimport ChessPiece from '../../objects/ChessPiece';\nimport King from '../../objects/King';\n\nclass ChessGameUI extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const chessBoardState = new ChessBoardState();\n        chessBoardState.reset();\n\n        this.state = {\n            chessBoardState: chessBoardState,\n            selectedPiece: null,\n        }\n\n        this.selectPiece = this.selectPiece.bind(this);\n        this.movePiece = this.movePiece.bind(this);\n        this.updateBoard = this.updateBoard.bind(this);\n    }\n\n    /**\n     * Select chess piece for movement.\n     * @param {ChessPiece} piece\n     */\n    selectPiece(piece) {\n        if (piece === this.state.selectedPiece) {\n            // Deselect piece\n            this.setState(prev => ({\n                ...prev,\n                selectedPiece: null,\n            }));\n        } else {\n            if (piece.color === this.state.chessBoardState.currentPlayer) {\n                // Select piece\n                this.setState(prev => ({\n                    ...prev,\n                    selectedPiece: piece,\n                }));\n            }\n        }\n    }\n\n    /**\n     * Move selected piece if move is valid.\n     * @param {number} row\n     * @param {number} col\n     */\n    movePiece(row, col) {\n        if (!this.state.selectedPiece) {\n            console.log('No piece selected');\n            return;\n        }\n\n        const validMoves = this.state.selectedPiece.validMoves(\n            this.state.chessBoardState\n        )\n        const move = validMoves.filter(move =>\n            move.coordsAEnd[0] === row && move.coordsAEnd[1] === col)[0];\n        if (move) {\n            move.execute(this.state.chessBoardState);\n        } else {\n            console.log('Invalid move');\n        }\n\n        console.log(this.state.chessBoardState.toFEN());\n\n        this.setState(prev => ({\n            ...prev,\n            chessBoardState: ChessBoardState.fromFEN(this.state.chessBoardState.toFEN()),\n            selectedPiece: null,\n        }));\n    }\n\n    /**\n     * Update board to match FEN code.\n     * @param {string} fenCode\n     */\n    updateBoard(fenCode) {\n        this.setState(prev => ({\n            ...prev,\n            chessBoardState: ChessBoardState.fromFEN(fenCode),\n        }));\n    }\n\n    /**\n     * Render ChessGame.\n     */\n    render() {\n        const chessPieces = this.state.chessBoardState.getPieces();\n        return (\n            <div>\n                <ChessBoardUI movePiece={this.movePiece} />\n                {\n                    chessPieces.map(piece =>\n                        <ChessPieceUI\n                            key={`chess-piece${piece.id}`}\n                            piece={piece}\n                            isInCheck={\n                                piece instanceof King\n                                && this.state.chessBoardState.kingInCheck(piece.color)\n                            }\n                            selectPiece={() => this.selectPiece(piece)} />\n                    )\n                }\n                {\n                    this.state.selectedPiece\n                        ? <ValidMovesUI\n                            validMoves={\n                                this.state.selectedPiece.validMoves(\n                                    this.state.chessBoardState\n                                )\n                            }\n                            movePiece={this.movePiece} />\n                        : <div></div>\n                }\n                <FENFormUI\n                    fenCode={this.state.chessBoardState.toFEN()}\n                    updateBoard={this.updateBoard}\n                ></FENFormUI>\n            </div>\n        );\n    }\n}\n\nexport default ChessGameUI;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport ChessGame from './components/ChessGameUI/ChessGameUI';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChessGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}